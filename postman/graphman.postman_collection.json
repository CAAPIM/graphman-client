{
	"info": {
		"_postman_id": "c1abec99-19f4-4c9f-bde8-3b35979524aa",
		"name": "Layer7 Gateway - graphman",
		"description": "# Graphman API Collection\n\n- version 1.0\n    \n\nUse this collection to discover the graphman API, to capture your relevant gateway configuration, to prepare your migration workflow\n\n## Set your graphman target\n\nThe collection has variables for pointing to your graphman endpoints. You can define separate targets for a source and a target gateway.\n\n## Set your gateway\n\nYou can change the admin username/password in the Authorization tab of the collection root as well",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "393566"
	},
	"item": [
		{
			"name": "Bundles and migration",
			"item": [
				{
					"name": "Everything",
					"item": [
						{
							"name": "Create bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const meta = JSON.parse(pm.collectionVariables.get(\"meta\"));",
											"const bundle = pm.response.json();",
											"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
											"",
											"normalize(bundle.data);",
											"delete bundle.data;",
											"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));",
											"",
											"function metaKey(key) {",
											"    for(var prop in meta) if (key.startsWith(meta[prop].prefix)) return prop;",
											"    return key;",
											"}",
											"",
											"function normalize(data) {",
											"    Object.entries(data).forEach(([key, value]) => {",
											"        const mkey = metaKey(key);",
											"        let target = bundle[mkey];",
											"        if (!target) target = bundle[mkey] = [];",
											"",
											"        if (Array.isArray(value)) value.forEach(item => target.push(item));",
											"        else target.push(value);",
											"",
											"        target.filter(item => item.allDependencies).forEach(item => normalize(item.allDependencies, bundle));",
											"        target.filter(item => item.directDependencies).forEach(item => normalize(item.directDependencies, bundle));",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query everything {\n    webApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value }\n        policy { xml }\n    }\n    soapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value }\n        wsdl \n        policy { xml }\n    }\n    internalWebApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n    internalSoapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n    encassConfigs {\n        goid guid name checksum \n        description policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults{ name type } \n        properties { name value }\n    }\n    globalPolicies {\n        goid guid name tag checksum \n        folderPath \n        policy { xml }\n    }\n    backgroundTaskPolicies {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n    policyFragments {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n\n    activeConnectors {\n        goid name checksum \n        enabled connectorType hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n    dtds {\n        goid systemId checksum \n        publicId description content\n    }\n    cassandraConnections {\n        goid name checksum \n        enabled keyspace contactPoints port compression username securePasswordName sslEnabled cipherSuites \n        properties { name value }\n    }\n    clusterProperties {\n        goid name checksum \n        description hiddenProperty value\n    }\n    emailListeners {\n        goid name checksum \n        enabled serverType hostname port folder deleteOnReceive username password hardwiredServiceName sslEnabled pollInterval sizeLimit \n        properties { name value }\n    }\n    fips {\n        goid name checksum \n        enableCredentialTypeSaml enableCredentialTypeX509 certificateValidation \n        certificateReferences { \n             goid name subjectDn thumbprintSha1 checksum \n             verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n             revocationCheckPolicy { goid name } \n             notBefore notAfter certBase64 \n        }\n    }\n    fipGroups {\n        goid name providerName checksum \n        description \n        members { \n            goid name login providerName checksum \n            subjectDn certBase64 firstName lastName email \n        }\n    }\n    fipUsers {\n        goid name login providerName checksum \n        subjectDn certBase64 firstName lastName email \n        memberOf { \n            goid name providerName checksum \n            description \n        }\n    }\n    internalDtds {\n        goid systemId checksum \n        publicId description content\n    }\n    internalGroups {\n        goid name checksum \n        description \n        members { \n            goid name login checksum \n            enabled password certBase64 firstName lastName email \n        }\n    }\n    internalSchemas {\n        goid systemId checksum \n        targetNs description content\n    }\n    internalUsers {\n         goid name login checksum \n         enabled password certBase64 firstName lastName email \n         memberOf { goid name checksum description }\n    }\n    jdbcConnections {\n         goid name checksum \n         enabled driverClass jdbcUrl username password minPoolSize maxPoolSize \n         properties { name value }\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum \n         enabled template initialContextFactoryClassname connectionFactoryName jndiUrl jndiUsername jndiPassword \n         jndiSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         destinationType destinationName destinationUsername destinationPassword \n         destinationSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         properties { name value }\n    }\n    keys {\n         goid keystoreId alias checksum \n         keyType subjectDn p12 certChain\n    }\n    ldaps {\n        goid name checksum \n        ldapUrls ldapsClientAuthEnabled ldapsClientKeystoreId ldapsClientKeyAlias searchBase writable bindDn bindPassword \n        userMappings { objClass nameAttrName loginAttrName passwdAttrName firstNameAttrName lastNameAttrName emailNameAttrName kerberosAttrName kerberosEnterpriseAttrName userCertAttrName passwdType { val } } \n        groupMappings { objClass nameAttrName memberAttrName memberStrategy { val } }\n    }\n    listenPorts {\n         goid name checksum \n         enabled protocol port hardwiredServiceName enabledFeatures \n         tlsSettings { clientAuthentication keystoreId keyAlias tlsVersions cipherSuites useCipherSuitesOrder } \n         properties { name value }\n    }\n    scheduledTasks {\n         goid name checksum \n         policyName jobType cronExpression executeOnSingleNode executeOnCreation executionDate status runAsUser runAsUserProviderName\n    }\n    schemas {\n         goid systemId checksum \n         targetNs description content\n    }\n    secrets {\n         goid name checksum \n         description secret secretType variableReferencable\n    }\n    serverModuleFiles {\n        goid name checksum \n        moduleType moduleSha256 signature signerCertBase64 \n        properties { name value } \n        moduleStates { nodeId nodeName state description } \n        moduleStateSummary { state description }\n    }\n    smConfigs {\n        goid name checksum \n        enabled agentHost agentIP agentHostConfig agentSecret cryptoMode ipCheckEnabled updateSSOToken clusterFailoverThreshold nonClusterFailover username securePasswordName \n        properties { name value }\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum \n         verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n         revocationCheckPolicy { goid name } \n         notBefore notAfter certBase64\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
							},
							"response": []
						},
						{
							"name": "Apply bundle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let bundle = JSON.parse(pm.environment.get(\"source_bundle\"));\r",
											"\r",
											"if (bundle.activeConnectors) bundle.activeConnectors.forEach(item => delete item.hardwiredService);\r",
											"if (bundle.emailListeners) bundle.emailListeners.forEach(item => delete item.hardwiredService);\r",
											"if (bundle.listenPorts) bundle.listenPorts.forEach(item => delete item.hardwiredService);\r",
											"if (bundle.soapServices) bundle.soapServices.forEach(item => delete item.resolvers);\r",
											"if (bundle.serverModuleFiles) bundle.serverModuleFiles.forEach(item => {\r",
											"    delete item.filePartName;\r",
											"    delete item.moduleStates;\r",
											"    delete item.moduleStateSummary;\r",
											"});\r",
											"\r",
											"if (bundle.internalGroups) bundle.internalGroups.forEach(item => {\r",
											"    delete item.members;\r",
											"    delete item.enabled;\r",
											"});\r",
											"if (bundle.internalUsers) bundle.internalUsers.forEach(item => {\r",
											"    delete item.members;\r",
											"    delete item.enabled;\r",
											"    if (item.memberOf) item.memberOf.forEach(subItem => {\r",
											"        delete subItem.goid;\r",
											"        delete subItem.description;\r",
											"        delete subItem.checksum;\r",
											"    });\r",
											"});\r",
											"if (bundle.internalSoapServices) bundle.internalSoapServices.forEach(item => delete item.resolvers);\r",
											"\r",
											"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation applyBundle (\n    $clusterProperties: [ClusterPropertyInput!]!=[],\n    $webApiServices: [WebApiServiceInput!]!=[],\n    $encassConfigs:[EncassConfigInput!]!=[],\n    $trustedCerts:[TrustedCertInput!]!=[],\n    $dtds:[DtdInput!]!=[],\n    $schemas:[SchemaInput!]!=[],\n    $jdbcConnections:[JdbcConnectionInput!]!=[],\n    $soapServices:[SoapServiceInput!]!=[],\n    $policyFragments: [PolicyFragmentInput!]!=[],\n    $fips:[FipInput!]!=[],\n    $ldaps:[LdapInput!]!=[],\n    $fipGroups:[FipGroupInput!]!=[],\n    $internalGroups:[InternalGroupInput!]!=[],\n    $fipUsers:[FipUserInput!]!=[],\n    $internalUsers:[InternalUserInput!]!=[],\n    $keys: [KeyInput!]!=[],\n    $secrets: [SecretInput!]!=[],\n    $cassandraConnections:[CassandraConnectionInput!]!=[],\n    $jmsDestinations:[JmsDestinationInput!]!=[],\n    $internalWebApiServices: [WebApiServiceInput!]!=[],\n    $internalSoapServices:[SoapServiceInput!]!=[],\n    $emailListeners: [EmailListenerInput!]!=[],\n    $listenPorts: [ListenPortInput!]!=[],\n    $activeConnectors: [ActiveConnectorInput!]!=[],\n    $smConfigs: [SMConfigInput!]!=[],\n    $globalPolicies:[GlobalPolicyInput!]!=[],\n    $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n    $scheduledTasks:[ScheduledTaskInput!]!=[],\n    $serverModuleFiles:[ServerModuleFileInput!]!=[]) {\n        setServerModuleFiles(input: $serverModuleFiles){serverModuleFiles{goid} detailedStatus {status description}}\n        setClusterProperties (input: $clusterProperties){clusterProperties {goid} detailedStatus {status description}}\n        setTrustedCerts (input: $trustedCerts){trustedCerts {goid} detailedStatus {status description}}\n        setSecrets (input: $secrets){secrets{name} detailedStatus {status description}}\n        setSchemas (input: $schemas){schemas {goid} detailedStatus {status description}}\n        setDtds (input: $dtds){dtds {goid} detailedStatus {status description}}\n        setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid} detailedStatus {status description}}\n        setFips (input: $fips){fips{goid} detailedStatus {status description}}\n        setLdaps (input: $ldaps){ldaps{goid} detailedStatus {status description}}\n        setFipGroups (input: $fipGroups){fipGroups{goid} detailedStatus {status description}}\n        setInternalGroups (input: $internalGroups){internalGroups{goid} detailedStatus {status description}}\n        setFipUsers (input: $fipUsers){fipUsers{goid} detailedStatus {status description}}\n        setInternalUsers (input: $internalUsers){internalUsers{goid} detailedStatus {status description}}\n        setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid} detailedStatus {status description}}\n        setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid} detailedStatus {status description}}\n        setSMConfigs (input: $smConfigs){smConfigs {goid} detailedStatus {status description}}\n        setPolicyFragments (input: $policyFragments){policyFragments {goid} detailedStatus {status description}}\n        setEncassConfigs (input: $encassConfigs){encassConfigs {goid} detailedStatus {status description}}\n        setGlobalPolicies (input: $globalPolicies){globalPolicies {goid} detailedStatus {status description}}\n        setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid} detailedStatus {status description}}\n        setWebApiServices (input: $webApiServices){webApiServices {goid} detailedStatus {status description}}\n        setSoapServices (input: $soapServices){soapServices {goid} detailedStatus {status description}}\n        setInternalWebApiServices (input: $internalWebApiServices){internalWebApiServices {goid} detailedStatus {status description}}\n        setInternalSoapServices (input: $internalSoapServices){internalSoapServices {goid} detailedStatus {status description}}\n        setEmailListeners (input: $emailListeners){emailListeners {goid} detailedStatus {status description}}\n        setListenPorts (input: $listenPorts){listenPorts {goid} detailedStatus {status description}}\n        setActiveConnectors (input: $activeConnectors){activeConnectors {goid} detailedStatus {status description}}\n        setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid} detailedStatus {status description}}\n\n        # Keys must be mutated at the end\n        setKeys (input: $keys) {keys {alias} detailedStatus {status description}}\n}\n",
										"variables": "{{source_bundle}}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "# Apply Bundle Template\n\nThis is a generic apply template mutation. It takes a graphman bundle as input. That bundle is a variable that was set by a Create bundle request prior to this one."
							},
							"response": []
						}
					],
					"description": "You can Run this folder and it will bundle everything from the source and apply it to the target.\n\nMake sure source and target are set in the Create and Apply"
				},
				{
					"name": "Policy and dependencies",
					"item": [
						{
							"name": "Create bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const outpackage = {};",
											"outpackage.clusterProperties = [];",
											"outpackage.jdbcConnections = [];",
											"outpackage.trustedCerts = [];",
											"outpackage.policyFragments = [];",
											"outpackage.encassConfigs = [];",
											"outpackage.schemas = [];",
											"outpackage.dtds = [];",
											"outpackage.webApiServices = [];",
											"outpackage.soapServices = [];",
											"outpackage.internalGroups = [];",
											"outpackage.ldaps = [];",
											"outpackage.fips = [];",
											"outpackage.fipGroups = [];",
											"outpackage.internalUsers = [];",
											"outpackage.fipUsers = [];",
											"outpackage.keys = [];",
											"outpackage.secrets = [];",
											"",
											"function processPolicyDependencies(policy) {",
											"    const dependencies = policy.allDependencies;",
											"    if (dependencies) {",
											"        processParent(dependencies);",
											"        delete policy.allDependencies;",
											"    }",
											"}",
											"function processSingleEntity(item, target) {",
											"    if (item.policy) processPolicyDependencies(item.policy);",
											"    // special case for soap",
											"    if (item.resolvers) {",
											"        if (item.resolvers.resolutionPath) {",
											"            item.resolutionPath = item.resolvers.resolutionPath",
											"        }",
											"        // drop resolvers which doesnt belong in mutation",
											"        delete item.resolvers;",
											"    }",
											"    target.push(item);",
											"}",
											"function processParent(bundleEntitiesParent) {",
											"    var keys = Object.keys(bundleEntitiesParent);",
											"    var entries = Object.values(bundleEntitiesParent);",
											"    for (var i = 0; i < keys.length; i++) {",
											"        var reportTarget = null;",
											"        if (keys[i].startsWith(\"webApiService\")) {",
											"            reportTarget = outpackage.webApiServices;",
											"        } else if (keys[i].startsWith(\"soapService\")) {",
											"            reportTarget = outpackage.soapServices;",
											"        } else if (keys[i].startsWith(\"policyFragment\")) {",
											"            reportTarget = outpackage.policyFragments;",
											"        } else if (keys[i].startsWith(\"encassConfig\")) {",
											"            reportTarget = outpackage.encassConfigs;",
											"        } else if (keys[i].startsWith(\"trustedCert\")) {",
											"            reportTarget = outpackage.trustedCerts;",
											"        } else if (keys[i].startsWith(\"clusterPropert\")) { // on purpose to catch both singular and plural",
											"            reportTarget = outpackage.clusterProperties;",
											"        } else if (keys[i].startsWith(\"jdbcConnection\")) {",
											"            reportTarget = outpackage.jdbcConnections;",
											"        } else if (keys[i].startsWith(\"dtd\")) {",
											"            reportTarget = outpackage.dtds;",
											"        } else if (keys[i].startsWith(\"schema\")) {",
											"            reportTarget = outpackage.schemas;",
											"        } else if (keys[i].startsWith(\"fipGroup\")) {",
											"            reportTarget = outpackage.fipGroups;",
											"        } else if (keys[i].startsWith(\"fipUser\")) {",
											"            reportTarget = outpackage.fipUsers;",
											"        } else if (keys[i].startsWith(\"fip\")) {",
											"            reportTarget = outpackage.fips;",
											"        } else if (keys[i].startsWith(\"internalGroup\")) {",
											"            reportTarget = outpackage.internalGroups;",
											"        } else if (keys[i].startsWith(\"internalUser\")) {",
											"            reportTarget = outpackage.internalUsers;",
											"        } else if (keys[i].startsWith(\"ldap\")) {",
											"            reportTarget = outpackage.ldaps;",
											"        } else if (keys[i].startsWith(\"key\")) {",
											"            reportTarget = outpackage.keys;",
											"        } else if (keys[i].startsWith(\"secret\")) {",
											"            reportTarget = outpackage.secrets;",
											"        } else {",
											"            console.error(\"Unrecognized \" + keys[i]);",
											"        }",
											"",
											"        if (reportTarget) {",
											"            if (Array.isArray(entries[i])) {",
											"                var arrayEntries = entries[i];",
											"                for (var j = 0; j < arrayEntries.length; j++) {",
											"                    processSingleEntity(arrayEntries[j], reportTarget);",
											"                }",
											"            } else {",
											"                processSingleEntity(entries[i], reportTarget);",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"let root=pm.response.json();",
											"if (!root.data) {",
											"    throw \"Input does not seem to be graphql response\";",
											"}",
											"processParent(root.data);",
											"",
											"// cleanup bundle of empty sections",
											"const keys = Object.keys(outpackage);",
											"for (var i = 0; i < keys.length; i++)  {",
											"    const prop = outpackage[keys[i]];",
											"    if (prop) {",
											"        if (Array.isArray(prop)) {",
											"            if (prop.length < 1) delete outpackage[keys[i]];",
											"        }",
											"    }",
											"}",
											"",
											"pm.environment.set(\"package_by_policy\", JSON.stringify(outpackage, null, 2));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        name\n        folderPath\n        policy {\n            xml\n            allDependencies {\n              policyFragments {\n                    name\n                    checksum\n                    folderPath\n                    guid\n                    policy {\n                        xml\n                    }\n                }\n                encassConfigs {\n                    name\n                    checksum\n                    policyName\n                    guid\n                    encassArgs {\n                        name\n                        type\n                        ordinal\n                        guiLabel\n                        guiPrompt\n                    }\n                    encassResults {\n                        name\n                        type\n                    }\n                }\n                trustedCerts {\n                    name\n                    checksum\n                    certBase64\n                    verifyHostname\n                    trustAnchor\n                    trustedFor\n                    revocationCheckPolicyType\n                }\n                clusterProperties {\n                    name\n                    checksum\n                    value\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                    driverClass\n                    jdbcUrl\n                    enabled\n                    username\n                    password\n                    minPoolSize\n                    maxPoolSize\n                    properties {\n                        name\n                        value\n                    }\n                }\n                schemas {\n                    systemId\n                    checksum\n                    targetNs\n                    description\n                    content\n                }\n                dtds {\n                    systemId\n                    checksum\n                    publicId\n                    description\n                    content\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                    enableCredentialTypeX509\n                    enableCredentialTypeSaml\n                    certificateReferences {\n                        thumbprintSha1\n                    }\n                }\n                ldaps {\n                    name\n                    goid\n                    ldapUrls\n                    ldapsClientAuthEnabled\n                    ldapsClientKeyAlias\n                    searchBase\n                    writable\n                    bindDn\n                    bindPassword\n                    userMappings {\n                        objClass\n                        nameAttrName\n                        loginAttrName\n                        passwdAttrName\n                        firstNameAttrName\n                        lastNameAttrName\n                        emailNameAttrName\n                        kerberosAttrName\n                        kerberosEnterpriseAttrName\n                        userCertAttrName\n                        passwdType {\n                            val\n                        }\n                    }\n                    groupMappings {\n                        objClass\n                        nameAttrName\n                        memberAttrName\n                        memberStrategy {\n                            val\n                        }\n                    }\n                    checksum\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                    description\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                    description\n                }\n                internalUsers {\n                    name\n                    goid\n                    checksum\n                    memberOf {\n                        name\n                    }\n                    login\n                    password\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                    subjectDn\n                    memberOf {\n                        name\n                    }\n                    login\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                    p12\n                }\n                secrets {\n                    name\n                    secretType\n                    checksum\n                    goid\n                    variableReferencable\n                    secret\n                    description\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    keyspace\n                    contactPoints\n                    port\n                    username\n                    securePasswordName\n                    sslEnabled\n                    cipherSuites\n                    properties {\n                        name\n                        value\n                    }\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    connectionGoid\n                    name\n                    direction\n                    providerType\n                    initialContextFactoryClassname\n                    connectionFactoryName\n                    jndiUrl\n                    jndiUsername\n                    jndiPassword\n                    template\n                    enabled\n                    jndiSslDetails {\n                        sslEnabled\n                        sslForAuthenticationOnly\n                        sslVerifyServerCertificate\n                        sslVerifyServerHostname\n                        sslClientKeyAlias\n                    }\n                    destinationType\n                    destinationName\n                    destinationUsername\n                    destinationPassword\n                    destinationSslDetails {\n                        sslEnabled\n                        sslForAuthenticationOnly\n                        sslVerifyServerCertificate\n                        sslVerifyServerHostname\n                        sslClientKeyAlias\n                    }\n                    template\n                    enabled\n                    properties {\n                        name\n                        value\n                    }\n                    checksum\n                }\n            }\n        }\n        guid\n    }\n}",
										"variables": "{\n    \"name\": \"Policy with encass\"\n}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Policy and dependencies bundle\n\nThis graphman query retrieves a policy and all its dependencies (including nested dependencies).\n\nThe script in Tests (running post-request) produces an applicable bundle from the graphman response. This bundle is persisted in an environment variable.\n\nInput:\n\nSee Body, GraphQL Variables. Set name: the name of the policy you want to package with its dependencies."
							},
							"response": []
						},
						{
							"name": "Apply bundle",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation applyBundle ($clusterProperties: [ClusterPropertyInput!]!=[],\n        $webApiServices: [WebApiServiceInput!]!=[],\n        $encassConfigs:[EncassConfigInput!]!=[],\n        $trustedCerts:[TrustedCertInput!]!=[],\n        $dtds:[DtdInput!]!=[],\n        $schemas:[SchemaInput!]!=[],\n        $jdbcConnections:[JdbcConnectionInput!]!=[],\n        $soapServices:[SoapServiceInput!]!=[],\n        $policyFragments: [PolicyFragmentInput!]!=[],\n        $fips:[FipInput!]!=[],\n        $ldaps:[LdapInput!]!=[],\n        $fipGroups:[FipGroupInput!]!=[],\n        $internalGroups:[InternalGroupInput!]!=[],\n        $fipUsers:[FipUserInput!]!=[],\n        $internalUsers:[InternalUserInput!]!=[],\n        $keys: [KeyInput!]!=[],\n        $secrets: [SecretInput!]!=[],\n        $cassandraConnections:[CassandraConnectionInput!]!=[],\n        $jmsDestinations:[JmsDestinationInput!]!=[],\n        $globalPolicies:[GlobalPolicyInput!]!=[],\n        $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n        $scheduledTasks:[ScheduledTaskInput!]!=[]) {\n    setClusterProperties (input: $clusterProperties){clusterProperties {goid}}\n    setTrustedCerts (input: $trustedCerts){trustedCerts {goid}}\n    setSchemas (input: $schemas){schemas {goid}}\n    setDtds (input: $dtds){dtds {goid}}\n    setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid}}\n    setFips (input: $fips){fips{goid}}\n    setLdaps (input: $ldaps){ldaps{goid}}\n    setFipGroups (input: $fipGroups){fipGroups{goid}}\n    setInternalGroups (input: $internalGroups){internalGroups{goid}}\n    setFipUsers (input: $fipUsers){fipUsers{goid}}\n    setInternalUsers (input: $internalUsers){internalUsers{goid}}\n    setKeys (input: $keys) {keys {alias}}\n    setSecrets (input: $secrets){secrets{name}}\n    setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid}}\n    setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid}}\n    setPolicyFragments (input: $policyFragments){policyFragments {goid}}\n    setEncassConfigs (input: $encassConfigs){encassConfigs {goid}}\n    setGlobalPolicies (input: $globalPolicies){globalPolicies {goid}}\n    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid}}\n    setWebApiServices (input: $webApiServices){webApiServices {goid}}\n    setSoapServices (input: $soapServices){soapServices {goid}}\n    setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid}}\n}",
										"variables": "{{package_by_policy}}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "# Apply bundle\n\nApplies the bundle that is recorded in the environment variable by the previous call (Create Bundle). Make sure you are using the same postman environment between those two calls."
							},
							"response": []
						}
					],
					"description": "Bundle example using a policy as a starting point"
				},
				{
					"name": "Folder and subfolders",
					"item": [
						{
							"name": "Create bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const outpackage = {};",
											"outpackage.clusterProperties = [];",
											"outpackage.jdbcConnections = [];",
											"outpackage.trustedCerts = [];",
											"outpackage.policyFragments = [];",
											"outpackage.encassConfigs = [];",
											"outpackage.schemas = [];",
											"outpackage.dtds = [];",
											"outpackage.webApiServices = [];",
											"outpackage.soapServices = [];",
											"outpackage.internalGroups = [];",
											"outpackage.ldaps = [];",
											"outpackage.fips = [];",
											"outpackage.fipGroups = [];",
											"outpackage.internalUsers = [];",
											"outpackage.fipUsers = [];",
											"outpackage.keys = [];",
											"outpackage.secrets = [];",
											"",
											"function processPolicyDependencies(policy) {",
											"    const dependencies = policy.allDependencies;",
											"    if (dependencies) {",
											"        processParent(dependencies);",
											"        delete policy.allDependencies;",
											"    }",
											"}",
											"function processSingleEntity(item, target) {",
											"    if (item.policy) processPolicyDependencies(item.policy);",
											"    // special case for soap",
											"    if (item.resolvers) {",
											"        if (item.resolvers.resolutionPath) {",
											"            item.resolutionPath = item.resolvers.resolutionPath",
											"        }",
											"        // drop resolvers which doesnt belong in mutation",
											"        delete item.resolvers;",
											"    }",
											"    target.push(item);",
											"}",
											"function processParent(bundleEntitiesParent) {",
											"    var keys = Object.keys(bundleEntitiesParent);",
											"    var entries = Object.values(bundleEntitiesParent);",
											"    for (var i = 0; i < keys.length; i++) {",
											"        var reportTarget = null;",
											"        if (keys[i].startsWith(\"webApiService\")) {",
											"            reportTarget = outpackage.webApiServices;",
											"        } else if (keys[i].startsWith(\"soapService\")) {",
											"            reportTarget = outpackage.soapServices;",
											"        } else if (keys[i].startsWith(\"policyFragment\")) {",
											"            reportTarget = outpackage.policyFragments;",
											"        } else if (keys[i].startsWith(\"encassConfig\")) {",
											"            reportTarget = outpackage.encassConfigs;",
											"        } else if (keys[i].startsWith(\"trustedCert\")) {",
											"            reportTarget = outpackage.trustedCerts;",
											"        } else if (keys[i].startsWith(\"clusterPropert\")) { // on purpose to catch both singular and plural",
											"            reportTarget = outpackage.clusterProperties;",
											"        } else if (keys[i].startsWith(\"jdbcConnection\")) {",
											"            reportTarget = outpackage.jdbcConnections;",
											"        } else if (keys[i].startsWith(\"dtd\")) {",
											"            reportTarget = outpackage.dtds;",
											"        } else if (keys[i].startsWith(\"schema\")) {",
											"            reportTarget = outpackage.schemas;",
											"        } else if (keys[i].startsWith(\"fipGroup\")) {",
											"            reportTarget = outpackage.fipGroups;",
											"        } else if (keys[i].startsWith(\"fipUser\")) {",
											"            reportTarget = outpackage.fipUsers;",
											"        } else if (keys[i].startsWith(\"fip\")) {",
											"            reportTarget = outpackage.fips;",
											"        } else if (keys[i].startsWith(\"internalGroup\")) {",
											"            reportTarget = outpackage.internalGroups;",
											"        } else if (keys[i].startsWith(\"internalUser\")) {",
											"            reportTarget = outpackage.internalUsers;",
											"        } else if (keys[i].startsWith(\"ldap\")) {",
											"            reportTarget = outpackage.ldaps;",
											"        } else if (keys[i].startsWith(\"key\")) {",
											"            reportTarget = outpackage.keys;",
											"        } else if (keys[i].startsWith(\"secret\")) {",
											"            reportTarget = outpackage.secrets;",
											"        } else {",
											"            console.error(\"Unrecognized \" + keys[i]);",
											"        }",
											"",
											"        if (reportTarget) {",
											"            if (Array.isArray(entries[i])) {",
											"                var arrayEntries = entries[i];",
											"                for (var j = 0; j < arrayEntries.length; j++) {",
											"                    processSingleEntity(arrayEntries[j], reportTarget);",
											"                }",
											"            } else {",
											"                processSingleEntity(entries[i], reportTarget);",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"let root=pm.response.json();",
											"if (!root.data) {",
											"    throw \"Input does not seem to be graphql response\";",
											"}",
											"processParent(root.data);",
											"",
											"// cleanup bundle of empty sections",
											"const keys = Object.keys(outpackage);",
											"for (var i = 0; i < keys.length; i++)  {",
											"    const prop = outpackage[keys[i]];",
											"    if (prop) {",
											"        if (Array.isArray(prop)) {",
											"            if (prop.length < 1) delete outpackage[keys[i]];",
											"        }",
											"    }",
											"}",
											"",
											"pm.environment.set(\"package_by_folder\", JSON.stringify(outpackage, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query folderContents ($folderPath: String!) {\n    policyFragmentsByFolderPath (folderPath: $folderPath) {\n        name\n        checksum\n        folderPath\n        policy {\n            xml\n        }\n        guid\n    }\n    webApiServicesByFolderPath (folderPath: $folderPath) {\n        name\n        checksum\n        resolutionPath\n        folderPath\n        policy {\n            xml\n        }\n        enabled\n        methodsAllowed\n    }\n}",
										"variables": "{\n    \"folderPath\": \"/\"\n}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Folder and sub-folders bundle\n\nThis graphman queries retrieves all services and policies in a folder and its subfolders.\n\nThe script in Tests (running post-request) produces an applicable bundle from the graphman response. This bundle is persisted in an environment variable.\n\nInput:\n\nSee Body, GraphQL Variables. Set folderPath: the folderPath containing the services and policies you want to package."
							},
							"response": []
						},
						{
							"name": "Apply bundle",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation applyBundle ($clusterProperties: [ClusterPropertyInput!]!=[],\n        $webApiServices: [WebApiServiceInput!]!=[],\n        $encassConfigs:[EncassConfigInput!]!=[],\n        $trustedCerts:[TrustedCertInput!]!=[],\n        $dtds:[DtdInput!]!=[],\n        $schemas:[SchemaInput!]!=[],\n        $jdbcConnections:[JdbcConnectionInput!]!=[],\n        $soapServices:[SoapServiceInput!]!=[],\n        $policyFragments: [PolicyFragmentInput!]!=[],\n        $fips:[FipInput!]!=[],\n        $ldaps:[LdapInput!]!=[],\n        $fipGroups:[FipGroupInput!]!=[],\n        $internalGroups:[InternalGroupInput!]!=[],\n        $fipUsers:[FipUserInput!]!=[],\n        $internalUsers:[InternalUserInput!]!=[],\n        $keys: [KeyInput!]!=[],\n        $secrets: [SecretInput!]!=[],\n        $cassandraConnections:[CassandraConnectionInput!]!=[],\n        $jmsDestinations:[JmsDestinationInput!]!=[],\n        $globalPolicies:[GlobalPolicyInput!]!=[],\n        $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n        $scheduledTasks:[ScheduledTaskInput!]!=[]) {\n    setClusterProperties (input: $clusterProperties){clusterProperties {goid}}\n    setTrustedCerts (input: $trustedCerts){trustedCerts {goid}}\n    setSchemas (input: $schemas){schemas {goid}}\n    setDtds (input: $dtds){dtds {goid}}\n    setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid}}\n    setFips (input: $fips){fips{goid}}\n    setLdaps (input: $ldaps){ldaps{goid}}\n    setFipGroups (input: $fipGroups){fipGroups{goid}}\n    setInternalGroups (input: $internalGroups){internalGroups{goid}}\n    setFipUsers (input: $fipUsers){fipUsers{goid}}\n    setInternalUsers (input: $internalUsers){internalUsers{goid}}\n    setKeys (input: $keys) {keys {alias}}\n    setSecrets (input: $secrets){secrets{name}}\n    setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid}}\n    setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid}}\n    setPolicyFragments (input: $policyFragments){policyFragments {goid}}\n    setEncassConfigs (input: $encassConfigs){encassConfigs {goid}}\n    setGlobalPolicies (input: $globalPolicies){globalPolicies {goid}}\n    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid}}\n    setWebApiServices (input: $webApiServices){webApiServices {goid}}\n    setSoapServices (input: $soapServices){soapServices {goid}}\n    setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid}}\n}",
										"variables": "{{package_by_folder}}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "# Apply bundle\n\nApplies the bundle that is recorded in the environment variable by the previous call (Create Bundle). Make sure you are using the same postman environment between those two calls."
							},
							"response": []
						}
					],
					"description": "This example shows bundle creation for all services and policies in a folder location"
				},
				{
					"name": "All services and policies",
					"item": [
						{
							"name": "Create Bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const outpackage = {};",
											"outpackage.clusterProperties = [];",
											"outpackage.jdbcConnections = [];",
											"outpackage.trustedCerts = [];",
											"outpackage.policyFragments = [];",
											"outpackage.encassConfigs = [];",
											"outpackage.schemas = [];",
											"outpackage.dtds = [];",
											"outpackage.webApiServices = [];",
											"outpackage.soapServices = [];",
											"outpackage.internalGroups = [];",
											"outpackage.ldaps = [];",
											"outpackage.fips = [];",
											"outpackage.fipGroups = [];",
											"outpackage.internalUsers = [];",
											"outpackage.fipUsers = [];",
											"outpackage.keys = [];",
											"outpackage.secrets = [];",
											"",
											"function processPolicyDependencies(policy) {",
											"    const dependencies = policy.allDependencies;",
											"    if (dependencies) {",
											"        processParent(dependencies);",
											"        delete policy.allDependencies;",
											"    }",
											"}",
											"function processSingleEntity(item, target) {",
											"    if (item.policy) processPolicyDependencies(item.policy);",
											"    // special case for soap",
											"    if (item.resolvers) {",
											"        if (item.resolvers.resolutionPath) {",
											"            item.resolutionPath = item.resolvers.resolutionPath",
											"        }",
											"        // drop resolvers which doesnt belong in mutation",
											"        delete item.resolvers;",
											"    }",
											"    target.push(item);",
											"}",
											"function processParent(bundleEntitiesParent) {",
											"    var keys = Object.keys(bundleEntitiesParent);",
											"    var entries = Object.values(bundleEntitiesParent);",
											"    for (var i = 0; i < keys.length; i++) {",
											"        var reportTarget = null;",
											"        if (keys[i].startsWith(\"webApiService\")) {",
											"            reportTarget = outpackage.webApiServices;",
											"        } else if (keys[i].startsWith(\"soapService\")) {",
											"            reportTarget = outpackage.soapServices;",
											"        } else if (keys[i].startsWith(\"policyFragment\")) {",
											"            reportTarget = outpackage.policyFragments;",
											"        } else if (keys[i].startsWith(\"encassConfig\")) {",
											"            reportTarget = outpackage.encassConfigs;",
											"        } else if (keys[i].startsWith(\"trustedCert\")) {",
											"            reportTarget = outpackage.trustedCerts;",
											"        } else if (keys[i].startsWith(\"clusterPropert\")) { // on purpose to catch both singular and plural",
											"            reportTarget = outpackage.clusterProperties;",
											"        } else if (keys[i].startsWith(\"jdbcConnection\")) {",
											"            reportTarget = outpackage.jdbcConnections;",
											"        } else if (keys[i].startsWith(\"dtd\")) {",
											"            reportTarget = outpackage.dtds;",
											"        } else if (keys[i].startsWith(\"schema\")) {",
											"            reportTarget = outpackage.schemas;",
											"        } else if (keys[i].startsWith(\"fipGroup\")) {",
											"            reportTarget = outpackage.fipGroups;",
											"        } else if (keys[i].startsWith(\"fipUser\")) {",
											"            reportTarget = outpackage.fipUsers;",
											"        } else if (keys[i].startsWith(\"fip\")) {",
											"            reportTarget = outpackage.fips;",
											"        } else if (keys[i].startsWith(\"internalGroup\")) {",
											"            reportTarget = outpackage.internalGroups;",
											"        } else if (keys[i].startsWith(\"internalUser\")) {",
											"            reportTarget = outpackage.internalUsers;",
											"        } else if (keys[i].startsWith(\"ldap\")) {",
											"            reportTarget = outpackage.ldaps;",
											"        } else if (keys[i].startsWith(\"key\")) {",
											"            reportTarget = outpackage.keys;",
											"        } else if (keys[i].startsWith(\"secret\")) {",
											"            reportTarget = outpackage.secrets;",
											"        } else {",
											"            console.error(\"Unrecognized \" + keys[i]);",
											"        }",
											"",
											"        if (reportTarget) {",
											"            if (Array.isArray(entries[i])) {",
											"                var arrayEntries = entries[i];",
											"                for (var j = 0; j < arrayEntries.length; j++) {",
											"                    processSingleEntity(arrayEntries[j], reportTarget);",
											"                }",
											"            } else {",
											"                processSingleEntity(entries[i], reportTarget);",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"let root=pm.response.json();",
											"if (!root.data) {",
											"    throw \"Input does not seem to be graphql response\";",
											"}",
											"processParent(root.data);",
											"",
											"// cleanup bundle of empty sections",
											"const keys = Object.keys(outpackage);",
											"for (var i = 0; i < keys.length; i++)  {",
											"    const prop = outpackage[keys[i]];",
											"    if (prop) {",
											"        if (Array.isArray(prop)) {",
											"            if (prop.length < 1) delete outpackage[keys[i]];",
											"        }",
											"    }",
											"}",
											"",
											"pm.environment.set(\"bundle_all_services_policies\", JSON.stringify(outpackage, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query servicesAndPolicies {\n    policyFragments {\n        name\n        checksum\n        folderPath\n        policy {\n            xml\n        }\n        guid\n    }\n    webApiServices {\n        name\n        checksum\n        resolutionPath\n        folderPath\n        policy {\n            xml\n        }\n        enabled\n        methodsAllowed\n    }\n    soapServices {\n        name\n        checksum\n        folderPath\n        resolvers {\n            resolutionPath\n        }\n        wsdl\n        wssProcessingEnabled\n        enabled\n        methodsAllowed\n        policy {\n          xml\n        }\n    }\n    backgroundTaskPolicies {\n       name\n       folderPath\n       guid\n       policy {\n           xml\n       }\n       checksum\n   }\n   globalPolicies {\n       name\n       tag\n       folderPath\n       policy {\n           xml\n       }\n       guid\n       goid\n       checksum\n   }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
							},
							"response": []
						},
						{
							"name": "Apply bundle",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation applyBundle ($clusterProperties: [ClusterPropertyInput!]!=[],\n        $webApiServices: [WebApiServiceInput!]!=[],\n        $encassConfigs:[EncassConfigInput!]!=[],\n        $trustedCerts:[TrustedCertInput!]!=[],\n        $dtds:[DtdInput!]!=[],\n        $schemas:[SchemaInput!]!=[],\n        $jdbcConnections:[JdbcConnectionInput!]!=[],\n        $soapServices:[SoapServiceInput!]!=[],\n        $policyFragments: [PolicyFragmentInput!]!=[],\n        $fips:[FipInput!]!=[],\n        $ldaps:[LdapInput!]!=[],\n        $fipGroups:[FipGroupInput!]!=[],\n        $internalGroups:[InternalGroupInput!]!=[],\n        $fipUsers:[FipUserInput!]!=[],\n        $internalUsers:[InternalUserInput!]!=[],\n        $keys: [KeyInput!]!=[],\n        $secrets: [SecretInput!]!=[],\n        $cassandraConnections:[CassandraConnectionInput!]!=[],\n        $jmsDestinations:[JmsDestinationInput!]!=[],\n        $globalPolicies:[GlobalPolicyInput!]!=[],\n        $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n        $scheduledTasks:[ScheduledTaskInput!]!=[]) {\n    setClusterProperties (input: $clusterProperties){clusterProperties {goid}}\n    setTrustedCerts (input: $trustedCerts){trustedCerts {goid}}\n    setSchemas (input: $schemas){schemas {goid}}\n    setDtds (input: $dtds){dtds {goid}}\n    setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid}}\n    setFips (input: $fips){fips{goid}}\n    setLdaps (input: $ldaps){ldaps{goid}}\n    setFipGroups (input: $fipGroups){fipGroups{goid}}\n    setInternalGroups (input: $internalGroups){internalGroups{goid}}\n    setFipUsers (input: $fipUsers){fipUsers{goid}}\n    setInternalUsers (input: $internalUsers){internalUsers{goid}}\n    setKeys (input: $keys) {keys {alias}}\n    setSecrets (input: $secrets){secrets{name}}\n    setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid}}\n    setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid}}\n    setPolicyFragments (input: $policyFragments){policyFragments {goid}}\n    setEncassConfigs (input: $encassConfigs){encassConfigs {goid}}\n    setGlobalPolicies (input: $globalPolicies){globalPolicies {goid}}\n    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid}}\n    setWebApiServices (input: $webApiServices){webApiServices {goid}}\n    setSoapServices (input: $soapServices){soapServices {goid}}\n    setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid}}\n}",
										"variables": "{{bundle_all_services_policies}}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "# Apply bundle\n\nApplies the bundle that is recorded in the environment variable by the previous call (Create Bundle). Make sure you are using the same postman environment between those two calls."
							},
							"response": []
						}
					],
					"description": "Bundle all services and policies in a gateway but nothing else"
				},
				{
					"name": "Service and dependencies",
					"item": [
						{
							"name": "Create bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const outpackage = {};",
											"outpackage.clusterProperties = [];",
											"outpackage.jdbcConnections = [];",
											"outpackage.trustedCerts = [];",
											"outpackage.policyFragments = [];",
											"outpackage.encassConfigs = [];",
											"outpackage.schemas = [];",
											"outpackage.dtds = [];",
											"outpackage.webApiServices = [];",
											"outpackage.soapServices = [];",
											"outpackage.internalGroups = [];",
											"outpackage.ldaps = [];",
											"outpackage.fips = [];",
											"outpackage.fipGroups = [];",
											"outpackage.internalUsers = [];",
											"outpackage.fipUsers = [];",
											"outpackage.keys = [];",
											"outpackage.secrets = [];",
											"",
											"function processPolicyDependencies(policy) {",
											"    const dependencies = policy.allDependencies;",
											"    if (dependencies) {",
											"        processParent(dependencies);",
											"        delete policy.allDependencies;",
											"    }",
											"}",
											"function processSingleEntity(item, target) {",
											"    if (item.policy) processPolicyDependencies(item.policy);",
											"    // special case for soap",
											"    if (item.resolvers) {",
											"        if (item.resolvers.resolutionPath) {",
											"            item.resolutionPath = item.resolvers.resolutionPath",
											"        }",
											"        // drop resolvers which doesnt belong in mutation",
											"        delete item.resolvers;",
											"    }",
											"    target.push(item);",
											"}",
											"function processParent(bundleEntitiesParent) {",
											"    var keys = Object.keys(bundleEntitiesParent);",
											"    var entries = Object.values(bundleEntitiesParent);",
											"    for (var i = 0; i < keys.length; i++) {",
											"        var reportTarget = null;",
											"        if (keys[i].startsWith(\"webApiService\")) {",
											"            reportTarget = outpackage.webApiServices;",
											"        } else if (keys[i].startsWith(\"soapService\")) {",
											"            reportTarget = outpackage.soapServices;",
											"        } else if (keys[i].startsWith(\"policyFragment\")) {",
											"            reportTarget = outpackage.policyFragments;",
											"        } else if (keys[i].startsWith(\"encassConfig\")) {",
											"            reportTarget = outpackage.encassConfigs;",
											"        } else if (keys[i].startsWith(\"trustedCert\")) {",
											"            reportTarget = outpackage.trustedCerts;",
											"        } else if (keys[i].startsWith(\"clusterPropert\")) { // on purpose to catch both singular and plural",
											"            reportTarget = outpackage.clusterProperties;",
											"        } else if (keys[i].startsWith(\"jdbcConnection\")) {",
											"            reportTarget = outpackage.jdbcConnections;",
											"        } else if (keys[i].startsWith(\"dtd\")) {",
											"            reportTarget = outpackage.dtds;",
											"        } else if (keys[i].startsWith(\"schema\")) {",
											"            reportTarget = outpackage.schemas;",
											"        } else if (keys[i].startsWith(\"fipGroup\")) {",
											"            reportTarget = outpackage.fipGroups;",
											"        } else if (keys[i].startsWith(\"fipUser\")) {",
											"            reportTarget = outpackage.fipUsers;",
											"        } else if (keys[i].startsWith(\"fip\")) {",
											"            reportTarget = outpackage.fips;",
											"        } else if (keys[i].startsWith(\"internalGroup\")) {",
											"            reportTarget = outpackage.internalGroups;",
											"        } else if (keys[i].startsWith(\"internalUser\")) {",
											"            reportTarget = outpackage.internalUsers;",
											"        } else if (keys[i].startsWith(\"ldap\")) {",
											"            reportTarget = outpackage.ldaps;",
											"        } else if (keys[i].startsWith(\"key\")) {",
											"            reportTarget = outpackage.keys;",
											"        } else if (keys[i].startsWith(\"secret\")) {",
											"            reportTarget = outpackage.secrets;",
											"        } else {",
											"            console.error(\"Unrecognized \" + keys[i]);",
											"        }",
											"",
											"        if (reportTarget) {",
											"            if (Array.isArray(entries[i])) {",
											"                var arrayEntries = entries[i];",
											"                for (var j = 0; j < arrayEntries.length; j++) {",
											"                    processSingleEntity(arrayEntries[j], reportTarget);",
											"                }",
											"            } else {",
											"                processSingleEntity(entries[i], reportTarget);",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"let root=pm.response.json();",
											"if (!root.data) {",
											"    throw \"Input does not seem to be graphql response\";",
											"}",
											"processParent(root.data);",
											"",
											"// cleanup bundle of empty sections",
											"const keys = Object.keys(outpackage);",
											"for (var i = 0; i < keys.length; i++)  {",
											"    const prop = outpackage[keys[i]];",
											"    if (prop) {",
											"        if (Array.isArray(prop)) {",
											"            if (prop.length < 1) delete outpackage[keys[i]];",
											"        }",
											"    }",
											"}",
											"",
											"pm.environment.set(\"service_and_dependencies\", JSON.stringify(outpackage, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query serviceWithDependencies ($resolutionPath: String!) {\n    webApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        name\n        checksum\n        resolutionPath\n        folderPath\n        policy {\n            xml\n            allDependencies {\n              policyFragments {\n                    name\n                    checksum\n                    folderPath\n                    guid\n                    policy {\n                        xml\n                    }\n                }\n                encassConfigs {\n                    name\n                    checksum\n                    policyName\n                    guid\n                    encassArgs {\n                        name\n                        type\n                        ordinal\n                        guiLabel\n                        guiPrompt\n                    }\n                    encassResults {\n                        name\n                        type\n                    }\n                }\n                trustedCerts {\n                    name\n                    checksum\n                    certBase64\n                    verifyHostname\n                    trustAnchor\n                    trustedFor\n                    revocationCheckPolicyType\n                }\n                clusterProperties {\n                    name\n                    checksum\n                    value\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                    driverClass\n                    jdbcUrl\n                    enabled\n                    username\n                    password\n                    minPoolSize\n                    maxPoolSize\n                    properties {\n                        name\n                        value\n                    }\n                }\n                schemas {\n                    systemId\n                    checksum\n                    targetNs\n                    description\n                    content\n                }\n                dtds {\n                    systemId\n                    checksum\n                    publicId\n                    description\n                    content\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                    enableCredentialTypeX509\n                    enableCredentialTypeSaml\n                    certificateReferences {\n                        thumbprintSha1\n                    }\n                }\n                ldaps {\n                    name\n                    goid\n                    ldapUrls\n                    ldapsClientAuthEnabled\n                    ldapsClientKeyAlias\n                    searchBase\n                    writable\n                    bindDn\n                    bindPassword\n                    userMappings {\n                        objClass\n                        nameAttrName\n                        loginAttrName\n                        passwdAttrName\n                        firstNameAttrName\n                        lastNameAttrName\n                        emailNameAttrName\n                        kerberosAttrName\n                        kerberosEnterpriseAttrName\n                        userCertAttrName\n                        passwdType {\n                            val\n                        }\n                    }\n                    groupMappings {\n                        objClass\n                        nameAttrName\n                        memberAttrName\n                        memberStrategy {\n                            val\n                        }\n                    }\n                    checksum\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                    description\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                    description\n                }\n                internalUsers {\n                    name\n                    goid\n                    checksum\n                    memberOf {\n                        name\n                    }\n                    login\n                    password\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                    subjectDn\n                    memberOf {\n                        name\n                    }\n                    login\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                    p12\n                }\n                secrets {\n                    name\n                    secretType\n                    checksum\n                    goid\n                    variableReferencable\n                    secret\n                    description\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    keyspace\n                    contactPoints\n                    port\n                    username\n                    securePasswordName\n                    sslEnabled\n                    cipherSuites\n                    properties {\n                        name\n                        value\n                    }\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    connectionGoid\n                    name\n                    direction\n                    providerType\n                    initialContextFactoryClassname\n                    connectionFactoryName\n                    jndiUrl\n                    jndiUsername\n                    jndiPassword\n                    template\n                    enabled\n                    jndiSslDetails {\n                        sslEnabled\n                        sslForAuthenticationOnly\n                        sslVerifyServerCertificate\n                        sslVerifyServerHostname\n                        sslClientKeyAlias\n                    }\n                    destinationType\n                    destinationName\n                    destinationUsername\n                    destinationPassword\n                    destinationSslDetails {\n                        sslEnabled\n                        sslForAuthenticationOnly\n                        sslVerifyServerCertificate\n                        sslVerifyServerHostname\n                        sslClientKeyAlias\n                    }\n                    template\n                    enabled\n                    properties {\n                        name\n                        value\n                    }\n                    checksum\n                }\n            }\n        }\n        enabled\n        methodsAllowed\n    }\n}",
										"variables": "{\n    \"resolutionPath\" : \"/restApi1\"\n}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
							},
							"response": []
						},
						{
							"name": "Apply bundle",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation applyBundle ($clusterProperties: [ClusterPropertyInput!]!=[],\n        $webApiServices: [WebApiServiceInput!]!=[],\n        $encassConfigs:[EncassConfigInput!]!=[],\n        $trustedCerts:[TrustedCertInput!]!=[],\n        $dtds:[DtdInput!]!=[],\n        $schemas:[SchemaInput!]!=[],\n        $jdbcConnections:[JdbcConnectionInput!]!=[],\n        $soapServices:[SoapServiceInput!]!=[],\n        $policyFragments: [PolicyFragmentInput!]!=[],\n        $fips:[FipInput!]!=[],\n        $ldaps:[LdapInput!]!=[],\n        $fipGroups:[FipGroupInput!]!=[],\n        $internalGroups:[InternalGroupInput!]!=[],\n        $fipUsers:[FipUserInput!]!=[],\n        $internalUsers:[InternalUserInput!]!=[],\n        $keys: [KeyInput!]!=[],\n        $secrets: [SecretInput!]!=[],\n        $cassandraConnections:[CassandraConnectionInput!]!=[],\n        $jmsDestinations:[JmsDestinationInput!]!=[],\n        $globalPolicies:[GlobalPolicyInput!]!=[],\n        $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n        $scheduledTasks:[ScheduledTaskInput!]!=[]) {\n    setClusterProperties (input: $clusterProperties){clusterProperties {goid}}\n    setTrustedCerts (input: $trustedCerts){trustedCerts {goid}}\n    setSchemas (input: $schemas){schemas {goid}}\n    setDtds (input: $dtds){dtds {goid}}\n    setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid}}\n    setFips (input: $fips){fips{goid}}\n    setLdaps (input: $ldaps){ldaps{goid}}\n    setFipGroups (input: $fipGroups){fipGroups{goid}}\n    setInternalGroups (input: $internalGroups){internalGroups{goid}}\n    setFipUsers (input: $fipUsers){fipUsers{goid}}\n    setInternalUsers (input: $internalUsers){internalUsers{goid}}\n    setKeys (input: $keys) {keys {alias}}\n    setSecrets (input: $secrets){secrets{name}}\n    setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid}}\n    setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid}}\n    setPolicyFragments (input: $policyFragments){policyFragments {goid}}\n    setEncassConfigs (input: $encassConfigs){encassConfigs {goid}}\n    setGlobalPolicies (input: $globalPolicies){globalPolicies {goid}}\n    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid}}\n    setWebApiServices (input: $webApiServices){webApiServices {goid}}\n    setSoapServices (input: $soapServices){soapServices {goid}}\n    setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid}}\n}",
										"variables": "{{service_and_dependencies}}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "# Apply bundle\n\nApplies the bundle that is recorded in the environment variable by the previous call (Create Bundle). Make sure you are using the same postman environment between those two calls."
							},
							"response": []
						}
					]
				}
			],
			"description": "# Bundles and Migration\n\nThis folder contains the creation and application of configuration bundles that are created according to different bundling strategies:\n\n1.  a service bundled with all its dependencies\n2.  services and policies in a folder and all its sub-folders\n3.  a policy bundled with all its dependencies"
		},
		{
			"name": "Config entities (CRUD)",
			"item": [
				{
					"name": "All entities",
					"item": [
						{
							"name": "Get Everything",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const meta = JSON.parse(pm.collectionVariables.get(\"meta\"));",
											"const bundle = pm.response.json();",
											"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
											"",
											"normalize(bundle.data);",
											"delete bundle.data;",
											"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));",
											"",
											"function metaKey(key) {",
											"    for(var prop in meta) if (key.startsWith(meta[prop].prefix)) return prop;",
											"    return key;",
											"}",
											"",
											"function normalize(data) {",
											"    Object.entries(data).forEach(([key, value]) => {",
											"        const mkey = metaKey(key);",
											"        let target = bundle[mkey];",
											"        if (!target) target = bundle[mkey] = [];",
											"",
											"        if (Array.isArray(value)) value.forEach(item => target.push(item));",
											"        else target.push(value);",
											"",
											"        target.filter(item => item.allDependencies).forEach(item => normalize(item.allDependencies, bundle));",
											"        target.filter(item => item.directDependencies).forEach(item => normalize(item.directDependencies, bundle));",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query everything {\n    webApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value }\n        policy { xml }\n    }\n    soapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value }\n        wsdl \n        policy { xml }\n    }\n    internalWebApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n    internalSoapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n    encassConfigs {\n        goid guid name checksum \n        description policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults{ name type } \n        properties { name value }\n    }\n    globalPolicies {\n        goid guid name tag checksum \n        folderPath \n        policy { xml }\n    }\n    backgroundTaskPolicies {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n    policyFragments {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n\n    activeConnectors {\n        goid name checksum \n        enabled connectorType hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n    cassandraConnections {\n        goid name checksum \n        enabled keyspace contactPoints port compression username securePasswordName sslEnabled cipherSuites \n        properties { name value }\n    }\n    clusterProperties {\n        goid name checksum \n        description hiddenProperty value\n    }\n    dtds {\n        goid systemId checksum \n        publicId description content\n    }\n    emailListeners {\n        goid name checksum \n        enabled serverType hostname port folder deleteOnReceive username password hardwiredServiceName sslEnabled pollInterval sizeLimit \n        properties { name value }\n    }\n    fips {\n        goid name checksum \n        enableCredentialTypeSaml enableCredentialTypeX509 certificateValidation \n        certificateReferences { \n             goid name subjectDn thumbprintSha1 checksum \n             verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n             revocationCheckPolicy { goid name } \n             notBefore notAfter certBase64 \n        }\n    }\n    fipGroups {\n        goid name providerName checksum \n        description \n        members { \n            goid name login providerName checksum \n            subjectDn certBase64 firstName lastName email \n        }\n    }\n    fipUsers {\n        goid name login providerName checksum \n        subjectDn certBase64 firstName lastName email \n        memberOf { \n            goid name providerName checksum \n            description \n        }\n    }\n    internalDtds {\n        goid systemId checksum \n        publicId description content\n    }\n    internalGroups {\n        goid name checksum \n        description \n        members { \n            goid name login checksum \n            enabled password certBase64 firstName lastName email \n        }\n    }\n    internalSchemas {\n        goid systemId checksum \n        targetNs description content\n    }\n    internalUsers {\n         goid name login checksum \n         enabled password certBase64 firstName lastName email \n         memberOf { goid name checksum description }\n    }\n    jdbcConnections {\n         goid name checksum \n         enabled driverClass jdbcUrl username password minPoolSize maxPoolSize \n         properties { name value }\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum \n         enabled template initialContextFactoryClassname connectionFactoryName jndiUrl jndiUsername jndiPassword \n         jndiSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         destinationType destinationName destinationUsername destinationPassword \n         destinationSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         properties { name value }\n    }\n    keys {\n         goid keystoreId alias checksum \n         keyType subjectDn p12 certChain\n    }\n    ldaps {\n        goid name checksum \n        ldapUrls ldapsClientAuthEnabled ldapsClientKeystoreId ldapsClientKeyAlias searchBase writable bindDn bindPassword \n        userMappings { objClass nameAttrName loginAttrName passwdAttrName firstNameAttrName lastNameAttrName emailNameAttrName kerberosAttrName kerberosEnterpriseAttrName userCertAttrName passwdType { val } } \n        groupMappings { objClass nameAttrName memberAttrName memberStrategy { val } }\n    }\n    listenPorts {\n         goid name checksum \n         enabled protocol port hardwiredServiceName enabledFeatures \n         tlsSettings { clientAuthentication keystoreId keyAlias tlsVersions cipherSuites useCipherSuitesOrder } \n         properties { name value }\n    }\n    scheduledTasks {\n         goid name checksum \n         policyName jobType cronExpression executeOnSingleNode executeOnCreation executionDate status runAsUser runAsUserProviderName\n    }\n    schemas {\n         goid systemId checksum \n         targetNs description content\n    }\n    secrets {\n         goid name checksum \n         description secret secretType variableReferencable\n    }\n    serverModuleFiles {\n        goid name checksum \n        moduleType moduleSha256 signature signerCertBase64 \n        properties { name value } \n        moduleStates { nodeId nodeName state description } \n        moduleStateSummary { state description }\n    }\n    smConfigs {\n        goid name checksum \n        enabled agentHost agentIP agentHostConfig agentSecret cryptoMode ipCheckEnabled updateSSOToken clusterFailoverThreshold nonClusterFailover username securePasswordName \n        properties { name value }\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum \n         verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n         revocationCheckPolicy { goid name } \n         notBefore notAfter certBase64\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
							},
							"response": []
						},
						{
							"name": "Config Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const summary = pm.response.json();",
											"pm.environment.set(\"source_summary\", JSON.stringify(summary, null, 2));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query summary {\n    webApiServices {\n         goid name resolutionPath checksum\n    }\n    soapServices {\n         goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum\n    }\n    internalWebApiServices {\n         goid name resolutionPath checksum\n    }\n    internalSoapServices {\n         goid resolutionPath checksum\n    }\n    encassConfigs {\n         goid guid name checksum\n    }\n    globalPolicies {\n         goid guid name tag checksum\n    }\n    backgroundTaskPolicies {\n         goid guid name checksum\n    }\n    policyFragments {\n         goid guid name checksum\n    }\n\n    activeConnectors {\n         goid name checksum\n    }\n    cassandraConnections {\n         goid name checksum\n    }\n    clusterProperties {\n         goid name checksum\n    }\n    dtds {\n         goid systemId checksum\n    }\n    emailListeners {\n         goid name checksum\n    }\n    fips {\n         goid name checksum\n    }\n    fipGroups {\n         goid name providerName checksum\n    }\n    fipUsers {\n         goid name providerName checksum\n    }\n    internalDtds {\n         goid systemId checksum\n    }\n    internalGroups {\n         goid name checksum\n    }\n    internalSchemas {\n         goid systemId checksum\n    }\n    internalUsers {\n         goid name login checksum\n    }\n    jdbcConnections {\n         goid name checksum\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum\n    }\n    keys {\n         goid keystoreId alias checksum\n    }\n    ldaps {\n         goid name checksum\n    }\n    listenPorts {\n         goid name checksum\n    }\n    scheduledTasks {\n         goid name checksum\n    }\n    schemas {\n         goid systemId checksum\n    }\n    secrets {\n         goid name checksum\n    }\n    serverModuleFiles {\n         goid name checksum\n    }\n    smConfigs {\n         goid name checksum\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "Summary of source\n\nUse as-is except for the target. This produces a summary of all the configuration."
							},
							"response": []
						}
					]
				},
				{
					"name": "Active Connectors",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setActiveConnectors (\n    $activeConnectors: [ActiveConnectorInput!]!,\n    $secrets: [SecretInput!]!,\n    $webApiServices: [WebApiServiceInput!]!) {\n    setSecrets (input: $secrets) {\n        detailedStatus {status description}\n        secrets {\n            goid\n            name\n            checksum\n        }\n    }\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n        }\n    }\n    setActiveConnectors (input: $activeConnectors) {\n        detailedStatus {status description}\n        activeConnectors {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"activeConnectors\": [\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62bb3c\",\n      \"name\": \"custom-kafka-producer\",\n      \"checksum\": \"3670f92c3bf525049ca7fec1a76fca099334e77d\",\n      \"enabled\": true,\n      \"connectorType\": \"KAFKA\",\n      \"properties\": [\n        {\n          \"name\": \"privateKeyAlias\",\n          \"value\": \"some-key\"\n        },\n        {\n          \"name\": \"producer.idempotence\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"bootstrapServers\",\n          \"value\": \"some-host,some-other-host\"\n        },\n        {\n          \"name\": \"producer.retries\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"role\",\n          \"value\": \"producer\"\n        },\n        {\n          \"name\": \"enableTls\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"keyStoreGoid\",\n          \"value\": \"00000000000000000000000000000002\"\n        },\n        {\n          \"name\": \"producer.acknowledgement\",\n          \"value\": \"all\"\n        },\n        {\n          \"name\": \"tlsVersion\",\n          \"value\": \"TLSv1.2\"\n        },\n        {\n          \"name\": \"tlsCipherSuites\",\n          \"value\": \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"authType\",\n          \"value\": \"PLAIN\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": [\n        {\n          \"name\": \"some-prop\",\n          \"value\": \"some-value\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b947\",\n      \"name\": \"custom-mq-inbound-connection\",\n      \"checksum\": \"cb9131dedb833339f4ea8f8fa0e07a1408db3fdb\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"hardwiredServiceName\": \"some-backend\",\n      \"properties\": [\n        {\n          \"name\": \"inboundAcknowledgementType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"isSslKeystoreUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundFailedQueueName\",\n          \"value\": \"some-failure-queue\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundGetMessageOptions\",\n          \"value\": \"5678\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_SPECIFIED_QUEUE\"\n        },\n        {\n          \"name\": \"specifiedReplyQueueName\",\n          \"value\": \"some-reply-queue\"\n        },\n        {\n          \"name\": \"numberOfSacToCreate\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"contentType\",\n          \"value\": \"application/x-www-form-urlencoded\"\n        },\n        {\n          \"name\": \"cipherSuite\",\n          \"value\": \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueueUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundOpenOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundReplyQueuePutMessageOptions\",\n          \"value\": \"2345\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"inboundFailedQueuePutMessageOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b928\",\n      \"name\": \"custom-mq-outbound-connection\",\n      \"checksum\": \"62cc36fc5ac27ef22034a699bc25cf7cfa932735\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslKeystoreUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundReplyQueueGetMessageOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"outboundMessageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxIdle\",\n          \"value\": \"5\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_SPECIFIED_QUEUE\"\n        },\n        {\n          \"name\": \"specifiedReplyQueueName\",\n          \"value\": \"some-reply-queue\"\n        },\n        {\n          \"name\": \"cipherSuite\",\n          \"value\": \"TLS_AES_256_GCM_SHA384\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxWait\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"sslKeystoreAlias\",\n          \"value\": \"ssl\"\n        },\n        {\n          \"name\": \"outboundIsTemplateQueue\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"sslKeystoreId\",\n          \"value\": \"00000000000000000000000000000002\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxActive\",\n          \"value\": \"10\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b924\",\n      \"name\": \"custom-sftp-polling-listener\",\n      \"checksum\": \"41c52640fa5304f32a2d9d470c5c7c46133d60e6\",\n      \"enabled\": true,\n      \"connectorType\": \"SFTP_POLLING_LISTENER\",\n      \"hardwiredServiceName\": \"some-backend\",\n      \"properties\": [\n        {\n          \"name\": \"contentType\",\n          \"value\": \"application/json; charset=utf-8\"\n        },\n        {\n          \"name\": \"deleteOnReceive\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"pollInterval\",\n          \"value\": \"160\"\n        },\n        {\n          \"name\": \"directory\",\n          \"value\": \"some-directory\"\n        },\n        {\n          \"name\": \"host\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"22\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        },\n        {\n          \"name\": \"fileNamePattern\",\n          \"value\": \"some-file-filter\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"useDefaultKexAlgorithms\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"enableRespMessages\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"securePasswordKeyName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": [\n        {\n          \"name\": \"some-prop\",\n          \"value\": \"some-value\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62ba06\",\n      \"name\": \"some-kafka-producer\",\n      \"checksum\": \"6169d7dc9bb61de8187ccc52cf3923dbe952178a\",\n      \"enabled\": true,\n      \"connectorType\": \"KAFKA\",\n      \"properties\": [\n        {\n          \"name\": \"producer.idempotence\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"bootstrapServers\",\n          \"value\": \"some-host,some-other-host\"\n        },\n        {\n          \"name\": \"enableTls\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"keyStoreGoid\",\n          \"value\": \"0000000000000000ffffffffffffffff\"\n        },\n        {\n          \"name\": \"producer.retries\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"role\",\n          \"value\": \"producer\"\n        },\n        {\n          \"name\": \"producer.acknowledgement\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b92a\",\n      \"name\": \"some-mq-inbound-connection\",\n      \"checksum\": \"2676970db5ff1618f47b81091de76457c69efc65\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"inboundAcknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueueUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_AUTOMATIC\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b926\",\n      \"name\": \"some-mq-outbound-connection\",\n      \"checksum\": \"e67400b19f693b974640ef8c0fdaf7a21ec259c3\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"outboundIsTemplateQueue\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"outboundMessageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_NONE\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"goid\": \"729c4c7c754438611ab08da3dd62b91f\",\n      \"name\": \"some-sftp-polling-listener\",\n      \"checksum\": \"0209b8391a976618c72b9929a7d23395c83df8f6\",\n      \"enabled\": true,\n      \"connectorType\": \"SFTP_POLLING_LISTENER\",\n      \"properties\": [\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"contentType\",\n          \"value\": \"text/xml; charset=utf-8\"\n        },\n        {\n          \"name\": \"deleteOnReceive\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"pollInterval\",\n          \"value\": \"60\"\n        },\n        {\n          \"name\": \"directory\",\n          \"value\": \"some-directory\"\n        },\n        {\n          \"name\": \"host\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"useDefaultKexAlgorithms\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"enableRespMessages\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"22\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ]\n    }\n  ],\n\n  \"secrets\": [\n    {\n      \"goid\": \"e676853df827149ba8def53a035084ce\",\n      \"name\": \"some-pwd\",\n      \"checksum\": \"f208cd65c82d6955d00d32a9af4d0f3ded6c6ff0\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiRl9P1rkBDjp9tuz1yFuuqjPX7a8TPap3KrLjsO0EsoHw==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ],\n\n  \"webApiServices\": [\n    {\n      \"goid\": \"7d0a6eb0f2f99e29fcc6a9952ec91a2b\",\n      \"name\": \"some-backend\",\n      \"resolutionPath\": \"/some-backend\",\n      \"checksum\": \"08f6226927b32dfebcc6423b58f4fb8f1f406c8d\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteActiveConnectors ($activeConnectors: [String!]!) {\n    deleteActiveConnectors (names: $activeConnectors) {\n        detailedStatus {status description}\n        activeConnectors {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"activeConnectors\": [\n        \"some-sftp-polling-listener\",\n        \"custom-sftp-polling-listener\",\n        \"some-mq-outbound-connection\",\n        \"custom-mq-outbound-connection\",\n        \"some-mq-inbound-connection\",\n        \"custom-mq-inbound-connection\",\n        \"some-kafka-producer\",\n        \"custom-kafka-producer\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query activeConnectors {\n    activeConnectors {\n        goid \n        name \n        checksum \n        \n        enabled \n        connectorType \n        hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Active Connector by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query activeConnectorByName ($name: String!) {\n    activeConnectorByName (name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        connectorType \n        hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n}",
												"variables": "{\n  \"name\": \"some-sftp-polling-listener\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Cassandra Connections",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setCassandraConnections($cassandraConnections: [CassandraConnectionInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability of cassandra connection's dependencies\n    setSecrets(input: $secrets) {\n        detailedStatus {status description}\n        secrets {\n            goid\n            name\n            checksum\n        }\n    }\n\n    setCassandraConnections (input: $cassandraConnections) {\n        detailedStatus {status description}\n        cassandraConnections {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"cassandraConnections\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb830\",\n      \"name\": \"some-cassandra-connection\",\n      \"checksum\": \"25dfefcbc814d1c5bde52ccc48fb2f8503693eed\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"NONE\",\n      \"username\": \"\",\n      \"sslEnabled\": false\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb832\",\n      \"name\": \"some-other-cassandra-connection\",\n      \"checksum\": \"1a31edf2060260e7bfa9a28871e9361b877ae0eb\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"LZ4\",\n      \"username\": \"some-user\",\n      \"securePasswordName\": \"some-pwd\",\n      \"sslEnabled\": true,\n      \"cipherSuites\": [\n        \"TLS_AES_128_GCM_SHA256\",\n        \"TLS_AES_256_GCM_SHA384\"\n      ],\n      \"properties\": [\n        {\n          \"name\": \"keepAlive\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"readTimeoutMillis\",\n          \"value\": \"12000\"\n        }\n      ]\n    }\n  ],\n\n  \"secrets\": [\n    {\n      \"goid\": \"e676853df827149ba8def53a035084ce\",\n      \"name\": \"some-pwd\",\n      \"checksum\": \"f208cd65c82d6955d00d32a9af4d0f3ded6c6ff0\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cassandra Connections"
									},
									"response": []
								},
								{
									"name": "Update Cassandra Connection - Change Contact Points",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateCassandraConnection($cassandraConnections: [CassandraConnectionInput!]!) {\n    setCassandraConnections (input: $cassandraConnections) {\n        detailedStatus {status description}\n        cassandraConnections {\n            goid\n            name\n            checksum\n\n            contactPoints # modified field\n        }\n    }\n}",
												"variables": "{\n  \"cassandraConnections\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb830\",\n      \"name\": \"some-cassandra-connection\",\n      \"checksum\": \"25dfefcbc814d1c5bde52ccc48fb2f8503693eed\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\",\n        \"some-contact-point3\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"NONE\",\n      \"username\": \"\",\n      \"sslEnabled\": false\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Cassandra Connection"
									},
									"response": []
								},
								{
									"name": "Delete Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteCassandraConnections($cassandraConnections: [String!]!) {\n    deleteCassandraConnections(names: $cassandraConnections) {\n        detailedStatus {status description}\n        cassandraConnections {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"cassandraConnections\": [\n        \"some-cassandra-connection\",\n        \"some-other-cassandra-connection\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cassandra Connections"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query cassandraConnections {\n    cassandraConnections {\n        goid \n        name \n        checksum \n        \n        enabled \n        keyspace \n        contactPoints \n        port \n        compression \n        username \n        securePasswordName \n        sslEnabled \n        cipherSuites \n        properties { name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieve All Cassandra Connections"
									},
									"response": []
								},
								{
									"name": "Cassandra Connection By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query cassandraConnectionByName($name: String!) {\n    cassandraConnectionByName(name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        keyspace \n        contactPoints \n        port \n        compression \n        username \n        securePasswordName \n        sslEnabled \n        cipherSuites \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-cassandra-connection\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieve Cassandra Connection By Name"
									},
									"response": []
								}
							]
						}
					],
					"description": "# Cassandra Connections"
				},
				{
					"name": "Cluster Properties",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setClusterProperties ($clusterProperties: [ClusterPropertyInput!]!) {\n    setClusterProperties (input: $clusterProperties) {\n        detailedStatus {status description}\n        clusterProperties {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"clusterProperties\": [\n    {\n      \"goid\": \"1e5ea0cdff607595529ce5a2f31606c6\",\n      \"name\": \"some-cwp\",\n      \"checksum\": \"15efa8c44f1cca94bc4514d6ef90b7b5b01e5569\",\n      \"description\": \"some cluster property\",\n      \"hiddenProperty\": false,\n      \"value\": \"some-value\"\n    },\n    {\n      \"goid\": \"1e5ea0cdff607595529ce5a2f31606c8\",\n      \"name\": \"some-other-cwp\",\n      \"checksum\": \"5de3784e993125ceb79352aca78315a0800017b2\",\n      \"description\": \"\",\n      \"hiddenProperty\": false,\n      \"value\": \"1234\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Cluster Property",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteClusterProperties ($clusterProperties: [String!]!) {\n    deleteClusterProperties (names: $clusterProperties) {\n        detailedStatus{status description}\n        clusterProperties {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"clusterProperties\": [\n        \"some-cwp\",\n        \"some-other-cwp\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterProperties {\n    clusterProperties {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Cluster Property by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterPropertyByName ($name: String!) {\n    clusterPropertyByName (name: $name) {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{\n  \"name\": \"some-cwp\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Email Listeners",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setEmailListeners($emailListeners: [EmailListenerInput!]!, $webApiServices: [WebApiServiceInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability if EmailListener's dependencies\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n        }\n    }\n    setSecrets(input: $secrets) {\n        detailedStatus {status description}\n        secrets {\n            goid\n            name\n            checksum\n        }\n    }\n\n\tsetEmailListeners(input: $emailListeners) {\n\t\tdetailedStatus {status description}\n\t    emailListeners {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"emailListeners\": [\n    {\n      \"goid\": \"255fbcde0ef8a709f7b21ef10671472c\",\n      \"name\": \"some-other-email-listener\",\n      \"checksum\": \"9bf0f1def1a02caaeaa20d2476b6772c924c243d\",\n      \"enabled\": false,\n      \"serverType\": \"IMAP\",\n      \"hostname\": \"some-host\",\n      \"port\": 1993,\n      \"folder\": \"some-folder\",\n      \"deleteOnReceive\": true,\n      \"username\": \"some-user\",\n      \"password\": \"${secpass.some-pwd.plaintext}\",\n      \"hardwiredServiceName\": \"some-backend-service\",\n      \"sslEnabled\": true,\n      \"pollInterval\": 120,\n      \"sizeLimit\": 2048\n    },\n    {\n      \"goid\": \"255fbcde0ef8a709f7b21ef1067146f9\",\n      \"name\": \"some-email-listener\",\n      \"checksum\": \"9f97f027843c351f1a069724d6f892b2ba164ca8\",\n      \"enabled\": true,\n      \"serverType\": \"POP3\",\n      \"hostname\": \"some-host\",\n      \"port\": 110,\n      \"folder\": \"INBOX\",\n      \"deleteOnReceive\": false,\n      \"username\": \"some-user\",\n      \"password\": \"JEw3RXYwMiR6pMoHCPGpb5DhQnSLlnFu7QfRDo7je27hPqgOUTUxNg==\",\n      \"sslEnabled\": false,\n      \"pollInterval\": 60\n    }\n  ],\n  \"webApiServices\": [\n    {\n      \"goid\": \"7d0a6eb0f2f99e29fcc6a9952ec91a2b\",\n      \"name\": \"some-backend-service\",\n      \"resolutionPath\": \"/some-backend\",\n      \"checksum\": \"08f6226927b32dfebcc6423b58f4fb8f1f406c8d\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ],\n  \"secrets\": [\n    {\n      \"goid\": \"e676853df827149ba8def53a035084ce\",\n      \"name\": \"some-pwd\",\n      \"checksum\": \"f208cd65c82d6955d00d32a9af4d0f3ded6c6ff0\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteEmailListeners($emailListeners: [String!]!) {\n  deleteEmailListeners(names: $emailListeners) {\n    detailedStatus {status description}\n    emailListeners {\n         goid\n         name\n    }\n  }\n}",
												"variables": "{\n    \"emailListeners\": [\n        \"some-email-listener\",\n        \"some-other-email-listener\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query emailListeners {\n    emailListeners {\n        goid \n        name \n        checksum \n        \n        enabled \n        serverType \n        hostname \n        port \n        folder \n        deleteOnReceive \n        username \n        password \n        hardwiredServiceName \n        sslEnabled \n        pollInterval \n        sizeLimit \n        properties{  name value }\n        \n        hardwiredService {\n            ... on PublishedService {\n            name \n            resolutionPath \n            folderPath \n            methodsAllowed \n            enabled\n            } \n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Listener By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query emailListeners ($name: String!) {\n    emailListenerByName (name: $name) {\n        name\n        hostname\n        port\n        username\n        password\n        serverType\n        sslEnabled\n        deleteOnReceive\n        folder\n        pollInterval\n        checksum\n        sizeLimit\n        properties {\n            name\n            value\n        }\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n                } \n        }\n    }\n}",
												"variables": "{\r\n  \"name\": \"some-email-listener\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Encass Configs",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setEncassConfigs (\n    $encassConfigs: [EncassConfigInput!]!,\n    $policyFragments: [PolicyFragmentInput!]!) {\n    # Ensure the availability of EncassConfig dependencies\n    setPolicyFragments(input: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n            checksum\n        }\n    }\n\n    setEncassConfigs(input: $encassConfigs) {\n        detailedStatus {status description}\n        encassConfigs {\n            goid\n            guid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"encassConfigs\": [\n    {\n      \"goid\": \"686319762da9d36e5fa67e004eae2c27\",\n      \"guid\": \"5047edc8-9df8-4e57-9e75-74221139c520\",\n      \"name\": \"some-encass\",\n      \"checksum\": \"b7a3ad923c7794eff70ca28f6543c6ab562f0240\",\n      \"policyName\": \"some-encass-policy\",\n      \"encassArgs\": [\n        {\n          \"name\": \"some-binary-arg\",\n          \"type\": \"BINARY\",\n          \"ordinal\": 8,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-bool-arg\",\n          \"type\": \"BOOLEAN\",\n          \"ordinal\": 7,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"boolean\"\n        },\n        {\n          \"name\": \"some-cert-arg\",\n          \"type\": \"CERTIFICATE\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"certificate\"\n        },\n        {\n          \"name\": \"some-datetime-arg\",\n          \"type\": \"DATE_TIME\",\n          \"ordinal\": 9,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-decimal-arg\",\n          \"type\": \"DECIMAL\",\n          \"ordinal\": 4,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"decimal\"\n        },\n        {\n          \"name\": \"some-float-arg\",\n          \"type\": \"FLOAT\",\n          \"ordinal\": 5,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"float\"\n        },\n        {\n          \"name\": \"some-int-arg\",\n          \"type\": \"INTEGER\",\n          \"ordinal\": 3,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"integer\"\n        },\n        {\n          \"name\": \"some-msg-arg\",\n          \"type\": \"MESSAGE\",\n          \"ordinal\": 10,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-string-arg\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"string arg\"\n        },\n        {\n          \"name\": \"some-xml-arg\",\n          \"type\": \"ELEMENT\",\n          \"ordinal\": 6,\n          \"guiPrompt\": false\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"some-binary-result\",\n          \"type\": \"BINARY\"\n        },\n        {\n          \"name\": \"some-blob-result\",\n          \"type\": \"BLOB\"\n        },\n        {\n          \"name\": \"some-bool-result\",\n          \"type\": \"BOOLEAN\"\n        },\n        {\n          \"name\": \"some-cert-result\",\n          \"type\": \"CERTIFICATE\"\n        },\n        {\n          \"name\": \"some-clob-result\",\n          \"type\": \"CLOB\"\n        },\n        {\n          \"name\": \"some-datetime-result\",\n          \"type\": \"DATE_TIME\"\n        },\n        {\n          \"name\": \"some-decimal-result\",\n          \"type\": \"DECIMAL\"\n        },\n        {\n          \"name\": \"some-float-result\",\n          \"type\": \"FLOAT\"\n        },\n        {\n          \"name\": \"some-int-result\",\n          \"type\": \"INTEGER\"\n        },\n        {\n          \"name\": \"some-msg-result\",\n          \"type\": \"MESSAGE\"\n        },\n        {\n          \"name\": \"some-string-result\",\n          \"type\": \"STRING\"\n        },\n        {\n          \"name\": \"some-unknown-result\",\n          \"type\": \"UNKNOWN\"\n        },\n        {\n          \"name\": \"some-xml-result\",\n          \"type\": \"ELEMENT\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"accessControl\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8c5\",\n      \"guid\": \"3acd132d-0b6a-4508-9a14-55b858651f2f\",\n      \"name\": \"some-other-encass\",\n      \"checksum\": \"6694860f2c0371cedc4071cf79418eaf34bf1c49\",\n      \"description\": \"some othe encass\",\n      \"policyName\": \"some-other-encass\",\n      \"encassArgs\": [\n        {\n          \"name\": \"input1\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input1\"\n        },\n        {\n          \"name\": \"input2\",\n          \"type\": \"STRING\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input2\"\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"output\",\n          \"type\": \"STRING\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"policyLogic\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    }\n  ],\n  \"policyFragments\": [\n    {\n      \"goid\": \"686319762da9d36e5fa67e004eae2bf9\",\n      \"guid\": \"605f1143-005c-4e19-8aa9-9238f665f1ec\",\n      \"name\": \"some-encass-policy\",\n      \"checksum\": \"07854fa4f9a0b2ddb97333351b21e9e4dc805a9a\",\n      \"folderPath\": \"/graphman-tests/encassConfigs\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-policy\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLXN0cmluZy1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-string-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWludC1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-int-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWRlY2ltYWwtYXJnfQ==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-decimal-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWZsb2F0LWFyZ30=\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-float-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWJvb2wtYXJnfQ==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-bool-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWJpbmFyeS1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-binary-result\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8af\",\n      \"guid\": \"264423e9-0695-4dde-9eb6-4d94f51d6536\",\n      \"name\": \"some-other-encass\",\n      \"checksum\": \"9b4c356553866571fbf7c7033da43b9885c9d2f7\",\n      \"folderPath\": \"/graphman-tests/encassConfigs\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-other-encass\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtpbnB1dDF9JHtpbnB1dDJ9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Encass Configs\n\nSet multiple encass configs altogether.\n\nAn encass config with the same name cannot exist on target. Assumes the policy is already present on target but can otherwise be combined in a bundled mutation.\n\nInput: sample input below:\n\n``` json\n{  \"input\": {            \"name\": \"combinevar2\",            \"policyName\": \"combinevar\",                        \"encassArgs\": [                {                    \"name\": \"a\",                    \"type\": \"STRING\",                    \"ordinal\": 1,                    \"guiLabel\": \"a\",                    \"guiPrompt\": true                },                {                    \"name\": \"b\",                    \"type\": \"STRING\",                    \"ordinal\": 2,                    \"guiLabel\": \"b\",                    \"guiPrompt\": true                }            ],            \"encassResults\": [                {                    \"name\": \"combo\",                    \"type\": \"STRING\"                }            ]        }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Update Encass Config - Add New Argument",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateEncassConfig ($encassConfigs: [EncassConfigInput!]!) {\n    setEncassConfigs (input: $encassConfigs) {\n        detailedStatus {status description}\n        encassConfigs {\n            goid\n            guid\n            name\n\n            encassArgs { name type ordinal guiPrompt guiLabel } \n        }\n    }\n}",
												"variables": "{\n  \"encassConfigs\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8c5\",\n      \"guid\": \"3acd132d-0b6a-4508-9a14-55b858651f2f\",\n      \"name\": \"some-other-encass\",\n      \"checksum\": \"6694860f2c0371cedc4071cf79418eaf34bf1c49\",\n      \"description\": \"some othe encass\",\n      \"policyName\": \"some-other-encass\",\n      \"encassArgs\": [\n        {\n          \"name\": \"input1\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input1\"\n        },\n        {\n          \"name\": \"input2\",\n          \"type\": \"STRING\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input2\"\n        },\n        {\n          \"name\": \"input3\",\n          \"type\": \"STRING\",\n          \"ordinal\": 3,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input3\"\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"output\",\n          \"type\": \"STRING\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"policyLogic\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Encass Config\n\nUpdates an existing encapsulated assertion configuration. If the encass does not already exists, this will fail.\n\nInput: the name of the encass to update and what to update. see sample:\n\n``` json\n{    \"name\":\"combinevar2\",    \"input\": {            \"encassResults\": [                {                    \"name\": \"combo\",                    \"type\": \"STRING\"                },                {                    \"name\": \"added\",                    \"type\": \"STRING\"                }            ]        }}\n```"
									},
									"response": []
								},
								{
									"name": "Delete Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteEncassConfigs (\n    $encassConfigs: [String!]!,\n    $policyFragments: [String!]!) {\n    deleteEncassConfigs (names: $encassConfigs) {\n        detailedStatus {status description}\n        encassConfigs {\n            goid\n            guid\n            name\n        }\n    }\n    deletePolicyFragments (names: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"encassConfigs\" : [\n        \"some-encass\",\n        \"some-other-encass\"\n    ],\n\n    \"policyFragments\": [\n        \"some-encass-policy\",\n        \"some-other-encass\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Encass Config\n\nDeletes an encass config given its name\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigs {\n    encassConfigs {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Encass Configs\n\nGet all encass configs\n\nInput: none"
									},
									"response": []
								},
								{
									"name": "Encass Config by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigByName ($name: String!) {\n    encassConfigByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-encass\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Encass Config by name\n\nGet the encapsulated assertion configuration by its name.\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Encass Config by GUID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigByGuid ($guid: ID!) {\n    encassConfigByGuid (guid: $guid) {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"guid\": \"5047edc8-9df8-4e57-9e75-74221139c520\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Encass Config by Guid\n\nGet the encapsulated assertion configuration by its guid.\n\nInput: guid"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Global Policies",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Global Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setGlobalPolicies ($globalPolicies: [GlobalPolicyInput!]!) {\n    setGlobalPolicies (input: $globalPolicies) {\n        detailedStatus {status description}\n        globalPolicies {\n            goid\n            guid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"globalPolicies\": [\n    {\n      \"goid\": \"6062b88ea8a2f4ea1858624075ab1135\",\n      \"guid\": \"3a2ec320-fbb6-43ad-bef3-4cc303cb35b5\",\n      \"name\": \"msg-completed\",\n      \"tag\": \"message-completed\",\n      \"checksum\": \"8fb96c412e1333aef65dee909ba49f0abfe021ca\",\n      \"folderPath\": \"/graphman-tests/globalPolicies\",\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: msg-completed\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"hello from ${policy.name}\\\"/>\\n            <L7p:LoggingOnly booleanValue=\\\"true\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"c662b16f-5b23-49d1-b34c-5924697cf038\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-global-fragment\\\"/>\\n        </L7p:Include>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"processing ${request.url} is completed\\\"/>\\n            <L7p:Level stringValue=\\\"WARNING\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"goid\": \"6062b88ea8a2f4ea1858624075ab111d\",\n      \"guid\": \"b8740af1-4e6f-4238-b091-d5392f41b789\",\n      \"name\": \"msg-received\",\n      \"tag\": \"message-received\",\n      \"checksum\": \"65bc17d4b15fbab47a1fcb3ef45b899fc6fd40a4\",\n      \"folderPath\": \"/graphman-tests/globalPolicies\",\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: msg-received\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"processing ${request.url}\\\"/>\\n            <L7p:Level stringValue=\\\"WARNING\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"hello from ${policy.name}\\\"/>\\n            <L7p:LoggingOnly booleanValue=\\\"true\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"c662b16f-5b23-49d1-b34c-5924697cf038\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-global-fragment\\\"/>\\n        </L7p:Include>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Global Policy",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteGlobalPolicies ($globalPolicies: [String!]!) {\n    deleteGlobalPolicies (tags: $globalPolicies) {\n        detailedStatus {status description}\n        globalPolicies {\n            goid\n            guid\n            name\n            tag\n        }\n    }\n}",
												"variables": "{\n    \"tags\" : [\n        \"message-received\", \n        \"message-completed\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Policy Fragment\n\nDelete a policy fragment given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Global Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPolicies {\n    globalPolicies {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Framents\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Global Policy By Tag",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPolicyByTag ($tag: String!) {\n    globalPolicyByTag (tag: $tag) {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"tag\": \"message-received\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Global Policies By Folder",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPoliciesByFolderPath ($folderPath: String!) {\n    globalPoliciesByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/globalPolicies\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Global Resources (Schemas and Dtds)",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Schemas",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSchemas ($schemas: [SchemaInput!]!) {\n    setSchemas (input: $schemas) {\n        detailedStatus {status description}\n        schemas {\n            goid \n            systemId \n            checksum \n        }\n    }\n}",
												"variables": "{\n  \"schemas\": [\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286aea\",\n      \"systemId\": \"http://warehouse.io/mywarehouse/some-schema\",\n      \"checksum\": \"a1d2ac1d48a0aceab7488c2eecdabd04dd4a3b1c\",\n      \"targetNs\": \"http://warehouse.acme.com/ws\",\n      \"description\": \"some schema\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n\"\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286aec\",\n      \"systemId\": \"http://warehouse.io/mywarehouse/some-other-schema\",\n      \"checksum\": \"b56656f3cc041cb647c7952c33746cbd72013cba\",\n      \"targetNs\": \"http://warehouse.acme.com/ws\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Schemas"
									},
									"response": []
								},
								{
									"name": "Set Dtds",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setDtds ($dtds: [DtdInput!]!) {\n    setDtds (input: $dtds) {\n        detailedStatus {status description}\n        dtds {\n            goid \n            systemId \n            checksum \n        }\n    }\n}",
												"variables": "{\n  \"dtds\": [\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286ae4\",\n      \"systemId\": \"http://example.org/some-dtd\",\n      \"checksum\": \"9fd7a425ce7ace3ff8068b1e44e9f3c9fbfb1579\",\n      \"publicId\": \"some-dtd\",\n      \"description\": \"some dtd\",\n      \"content\": \"<!DOCTYPE note\\n[\\n<!ELEMENT note (to,from,heading,body)>\\n<!ELEMENT to (#PCDATA)>\\n<!ELEMENT from (#PCDATA)>\\n<!ELEMENT heading (#PCDATA)>\\n<!ELEMENT body (#PCDATA)>\\n]>\"\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286ae6\",\n      \"systemId\": \"http://example.org/some-other-dtd\",\n      \"checksum\": \"c5ac262c8bb14610c795a136935a2ac64dd4598f\",\n      \"publicId\": \"some-other-dtd\",\n      \"description\": \"some other dtd\",\n      \"content\": \"<!DOCTYPE note\\n[\\n<!ELEMENT note (to,from,heading,body)>\\n<!ELEMENT to (#PCDATA)>\\n<!ELEMENT from (#PCDATA)>\\n<!ELEMENT heading (#PCDATA)>\\n<!ELEMENT body (#PCDATA)>\\n]>\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Dtds"
									},
									"response": []
								},
								{
									"name": "Delete Global Resources",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteResources (\n    $schemas: [String!]!, \n    $dtds: [String!]!) {\n    deleteSchemas (systemIds: $schemas) {\n        detailedStatus {status description}\n        schemas {\n            goid\n            systemId\n        }\n    }\n    deleteDtds (systemIds: $dtds) {\n        detailedStatus {status description}\n        dtds {\n            goid\n            systemId\n        }\n    }\n}",
												"variables": "{\n    \"schemas\" : [\n        \"http://warehouse.io/mywarehouse/some-schema\", \n        \"http://warehouse.io/mywarehouse/some-other-schema\"\n    ],\n    \"dtds\" : [\n        \"http://example.org/some-dtd\",\n        \"http://example.org/some-other-dtd\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Resource"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Schemas",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query schemas {\n    schemas {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n    internalSchemas {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Schemas"
									},
									"response": []
								},
								{
									"name": "All Dtds",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query dtds {\n    dtds {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n    internalDtds {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Dtds"
									},
									"response": []
								},
								{
									"name": "Schema by SystemID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query schemaBySystemId ($systemId: String!) {\n    schemaBySystemId (systemId: $systemId) {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n}",
												"variables": "{\n    \"systemId\" : \"http://warehouse.io/mywarehouse\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Schema by Id"
									},
									"response": []
								},
								{
									"name": "Dtd by SystemID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query dtdBySystemId ($systemId: String!) {\n    dtdBySystemId (systemId: $systemId) {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n}",
												"variables": "{\n    \"systemId\" : \"http://mydtdid\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Dtd by Id"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Queries",
							"item": [
								{
									"name": "Search",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query searchIdp ($filter : IdpFilter!) {\n    searchIdp (filter : $filter) {\n        internalUsers {\n            name\n            goid\n        }\n        internalGroups {\n            name\n            goid\n        }\n        fipUsers {\n            name\n        }\n        fipGroups {\n            name\n        }\n    }\n}",
												"variables": "{\n    \"filter\" : {\n        \"providerName\": \"Internal idp\",\n        \"namePattern\" : \"abc*\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "All users and groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query everyIdentities {\n    internalUsers {\n        name\n        memberOf {\n            name\n            description\n        }\n        login\n        password\n        firstName\n        lastName\n        email\n        certBase64\n        enabled\n    }\n    fipUsers {\n        name\n        subjectDn\n        memberOf {\n            name\n            description\n        }\n        login\n        firstName\n        lastName\n        email\n        certBase64\n    }\n    internalGroups {\n        name\n        goid\n        description\n        members {\n            name\n        }\n    }\n    fipGroups {\n        name\n        goid\n        description\n        members {\n            name\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All users and groups\n\nGet all combined users and groups from fips and internal."
									},
									"response": []
								},
								{
									"name": "Internal Users",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalUsers {\n    internalUsers {\n        name\n        goid\n        checksum\n        memberOf {\n            name\n        }\n        login\n        password\n        firstName\n        lastName\n        email\n        certBase64\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Internal Users"
									},
									"response": []
								},
								{
									"name": "Internal User By Login",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalUserByLogin ($login: String!) {\n    internalUserByLogin(login : $login) {\n        name\n        goid\n        checksum\n        memberOf {\n            name\n        }\n        login\n        password\n        firstName\n        lastName\n        email\n        certBase64\n    }\n}",
												"variables": "{\n    \"login\" : \"abcdefg\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Internal User by Login"
									},
									"response": []
								},
								{
									"name": "Fip Users",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipUsers {\n    fipUsers {\n        name\n        providerName\n        checksum\n        subjectDn\n        memberOf {\n            name\n            description\n        }\n        login\n        firstName\n        lastName\n        email\n        certBase64\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip User By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipUserByName($providerName: String!, $userName: String!) {\n    fipUserByName (providerName: $providerName, userName : $userName){\n        name\n        goid\n        providerName\n        checksum\n        subjectDn\n        memberOf {\n            name\n        }\n        login\n        firstName\n        lastName\n        email\n        certBase64\n    }\n}",
												"variables": "{\n    \"providerName\" : \"Foo\",\n    \"userName\" : \"user1\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalGroups {\n    internalGroups {\n        name\n        checksum\n        goid\n        description\n        members {\n            name\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalGroupByName($name: String!) {\n    internalGroupByName(name : $name) {\n        name\n        checksum\n        goid\n        description\n    }\n}",
												"variables": "{\n    \"name\" : \"banana_users\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip Groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipGroups {\n    fipGroups {\n        name\n        checksum\n        goid\n        description\n        members {\n            name\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipGroupByName($providerName: String!, $groupName: String!) {\n    fipGroupByName(providerName: $providerName, groupName : $groupName) {\n        name\n        checksum\n        goid\n        description\n    }\n}",
												"variables": "{\n    \"providerName\": \"Foo\",\n    \"groupName\": \"fipgroup\"\n    \n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fips",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fips {\n    fips {\n        name\n        checksum\n        goid\n        enableCredentialTypeX509\n        enableCredentialTypeSaml\n        certificateReferences {\n            thumbprintSha1\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipByName($name: String!) {\n    fipByName(name : $name) {\n        name\n        checksum\n        goid\n        enableCredentialTypeX509\n        enableCredentialTypeSaml\n        certificateReferences {\n            thumbprintSha1\n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"Foo\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldap Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldaps {\n    ldaps {\n        name\n        goid\n        ldapUrls\n        ldapsClientAuthEnabled\n        ldapsClientKeyAlias\n        searchBase\n        writable\n        bindDn\n        bindPassword\n        userMappings {\n            objClass\n            nameAttrName\n            loginAttrName\n            passwdAttrName\n            firstNameAttrName\n            lastNameAttrName\n            emailNameAttrName\n            kerberosAttrName\n            kerberosEnterpriseAttrName\n            userCertAttrName\n            passwdType {\n                val\n            }\n        }\n        groupMappings {\n            objClass\n            nameAttrName\n            memberAttrName\n            memberStrategy {\n                val\n            }\n        }\n        checksum\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldap Idp By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldapByName($name : String!) {\n    ldapByName(name : $name) {\n        name\n        goid\n        checksum\n        ldapUrls\n        ldapsClientAuthEnabled\n        ldapsClientKeyAlias\n        searchBase\n        writable\n        bindDn\n        bindPassword\n        userMappings {\n            objClass\n            nameAttrName\n            loginAttrName\n            passwdAttrName\n            firstNameAttrName\n            lastNameAttrName\n            emailNameAttrName\n            kerberosAttrName\n            kerberosEnterpriseAttrName\n            userCertAttrName\n            passwdType {\n                val\n            }\n        }\n        groupMappings {\n            objClass\n            nameAttrName\n            memberAttrName\n            memberStrategy {\n                val\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"example ldap\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Api dependencies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServicesByName ($name: String!) {\n    webApiServicesByName (name: $name) {\n        name\n        resolutionPath\n        folderPath\n        policy {\n            allDependencies {\n                fips {\n                    name\n                    checksum\n                    goid\n                    enableCredentialTypeX509\n                    enableCredentialTypeSaml\n                    certificateReferences {\n                        thumbprintSha1\n                    }\n                }\n                ldaps {\n                    name\n                    goid\n                    ldapUrls\n                    ldapsClientAuthEnabled\n                    ldapsClientKeyAlias\n                    searchBase\n                    writable\n                    bindDn\n                    bindPassword\n                    userMappings {\n                        objClass\n                        nameAttrName\n                        loginAttrName\n                        passwdAttrName\n                        firstNameAttrName\n                        lastNameAttrName\n                        emailNameAttrName\n                        kerberosAttrName\n                        kerberosEnterpriseAttrName\n                        userCertAttrName\n                        passwdType {\n                            val\n                        }\n                    }\n                    groupMappings {\n                        objClass\n                        nameAttrName\n                        memberAttrName\n                        memberStrategy {\n                            val\n                        }\n                    }\n                    checksum\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                    description\n                }\n                fipGroups {\n                    name\n                    checksum\n                    goid\n                    description\n                }\n                internalUsers {\n                    name\n                    goid\n                    checksum\n                    memberOf {\n                        name\n                    }\n                    login\n                    password\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    subjectDn\n                    memberOf {\n                        name\n                    }\n                    login\n                    firstName\n                    lastName\n                    email\n                    certBase64\n                }\n                trustedCerts {\n                    name\n                    certBase64\n                    verifyHostname\n                    trustAnchor\n                    trustedFor\n                    revocationCheckPolicyType\n                }\n                \n              policyFragments {\n                    name\n                    folderPath\n                    guid\n                    policy {\n                        xml\n                    }\n                }\n                encassConfigs {\n                    name\n                    policyName\n                    guid\n                    encassArgs {\n                        name\n                        type\n                        ordinal\n                        guiLabel\n                        guiPrompt\n                    }\n                    encassResults {\n                        name\n                        type\n                    }\n                }\n                clusterProperties {\n                    name\n                    value\n                }\n                jdbcConnections {\n                    name\n                    driverClass\n                    jdbcUrl\n                    enabled\n                    username\n                    password\n                    minPoolSize\n                    maxPoolSize\n                    properties {\n                        name\n                        value\n                    }\n                }\n                schemas {\n                    systemId\n                    targetNs\n                    description\n                    xml\n                }\n                dtds {\n                    systemId\n                    publicId\n                    description\n                    definition\n                }\n            }\n        }\n        goid\n        enabled\n        methodsAllowed\n        checksum\n    }\n}",
												"variables": "{\n    \"name\": \"ServiceWithIds\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Fips",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFips ($input: [FipInput!]!) {\n    setFips (input: $input) {\n        detailedStatus{status description}\n        fips {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n                \"name\": \"Foo2\",\n                \"checksum\": \"46994bf282abf9d6e3640b88f70ced716a2e361d\",\n                \"enableCredentialTypeX509\": false,\n                \"enableCredentialTypeSaml\": true,\n                \"certificateReferences\": [\n                    {\n                        \"thumbprintSha1\": \"boRxUgf35aj2SUf0fjT6MkGiKv8=\"\n                    }\n                ]\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Ldaps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setLdaps ($input: [LdapInput!]!) {\n    setLdaps (input: $input) {\n        ldaps {\n            name\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n     {\n                \"name\": \"example ldap2\",\n                \"goid\": \"62a6996e5adf7374d43434e9bc080dd0\",\n                \"ldapUrls\": [\n                    \"ldap://ldap.forumsys.com\"\n                ],\n                \"ldapsClientAuthEnabled\": false,\n                \"searchBase\": \"dc=example,dc=com\",\n                \"writable\": false,\n                \"bindDn\": \"cn=read-only-admin,dc=example,dc=com\",\n                \"bindPassword\": \"password\",\n                \"userMappings\": [\n                    {\n                        \"objClass\": \"inetOrgPerson\",\n                        \"nameAttrName\": \"cn\",\n                        \"loginAttrName\": \"uid\",\n                        \"passwdAttrName\": \"userPassword\",\n                        \"firstNameAttrName\": \"givenName\",\n                        \"lastNameAttrName\": \"sn\",\n                        \"emailNameAttrName\": \"mail\",\n                        \"kerberosAttrName\": \"uid\",\n                        \"userCertAttrName\": \"userCertificate;binary\",\n                        \"passwdType\": {\n                            \"val\": 0\n                        }\n                    }\n                ],\n                \"groupMappings\": [\n                    {\n                        \"objClass\": \"posixGroup\",\n                        \"nameAttrName\": \"cn\",\n                        \"memberAttrName\": \"memberUid\",\n                        \"memberStrategy\": {\n                            \"val\": 1\n                        }\n                    },\n                    {\n                        \"objClass\": \"groupOfUniqueNames\",\n                        \"nameAttrName\": \"cn\",\n                        \"memberAttrName\": \"uniqueMember\",\n                        \"memberStrategy\": {\n                            \"val\": 2\n                        }\n                    },\n                    {\n                        \"objClass\": \"organizationalUnit\",\n                        \"nameAttrName\": \"ou\",\n                        \"memberAttrName\": \"\",\n                        \"memberStrategy\": {\n                            \"val\": 3\n                        }\n                    }\n                ],\n                \"checksum\": \"cf7a2db154a643aae8980570da1289de0e995f56\"\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete IdP",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteIdp($name: String!) {\n  deleteIdp(name: $name) {\n    deleted\n  }\n}",
												"variables": "{\n    \"name\": \"example ldap2\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Internal Users",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalUsers ($input: [InternalUserInput!]!) {\n    setInternalUsers (input: $input) {\n        internalUsers {\n            name\n            memberOf{name}\n            password\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n                \"name\": \"somebody\",\n                \"checksum\": \"23654d13f7591e1427612fdd991adc37a1faa4bf\",\n                \"memberOf\": [\n                    {\n                        \"name\": \"banana_users\"\n                    }\n                ],\n                \"login\": \"banana3\",\n                \"password\": \"$6$H71tKD5zQo01csDP$aBcup/hEjs1FDxRaJZM8POpPBp2Ge.fBd6nX/Uy7kPc4kn26VhpVj2n3ZDNM.lC6fTcr2NYO36orNoNKW7Gzx0\",\n                \"certBase64\": \"MIIGjDCCBXSgAwIBAgIJAOfLGfa8uS2BMA0GCSqGSIb3DQEBCwUAMIG0MQswCQYDVQQGEwJVUzEQ\\r\\nMA4GA1UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTEaMBgGA1UEChMRR29EYWRkeS5j\\r\\nb20sIEluYy4xLTArBgNVBAsTJGh0dHA6Ly9jZXJ0cy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LzEz\\r\\nMDEGA1UEAxMqR28gRGFkZHkgU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTIy\\r\\nMDMxNDE3NDkyM1oXDTIzMDQxNTE1Mzg0MVowFzEVMBMGA1UEAwwMKi5rZWxvd25hLmNhMIIBIjAN\\r\\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2QCY48mBJfLCIuyJIQTwF5gikuf5B/FoGZ3LcAtv\\r\\nE9tagkS+0qDsMorwFYT93tnJFusmIVqoGUbVx7IRIWYQIzZsPUBLUEqoBYoyZJwYfsuX2XVP5XxC\\r\\noKuMQdNw/G32e2lbpcnYQ27svQ8jq9Hx+PcCxywgi8ar/jC3Bm/+NSl5IM63iiV2VFdrE74a9fmp\\r\\nN40W9uDl4du4N6PwMxc8cihn8ymiOcwFUC7R/6+4sIBFuddAMZ1J8FrOO+RSdflbOQvJYZDzFK00\\r\\n9VOC6PlxcK0IRKA450Qd3mzdHSJdLuPu38AuW394tvS9/M3ZlWQuZvqLCYIx/xpTWD7qWQ8H8QID\\r\\nAQABo4IDOzCCAzcwDAYDVR0TAQH/BAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw\\r\\nDgYDVR0PAQH/BAQDAgWgMDgGA1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly9jcmwuZ29kYWRkeS5jb20v\\r\\nZ2RpZzJzMS0zOTIxLmNybDBdBgNVHSAEVjBUMEgGC2CGSAGG/W0BBxcBMDkwNwYIKwYBBQUHAgEW\\r\\nK2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8wCAYGZ4EMAQIBMHYG\\r\\nCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZ29kYWRkeS5jb20vMEAGCCsG\\r\\nAQUFBzAChjRodHRwOi8vY2VydGlmaWNhdGVzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkvZ2RpZzIu\\r\\nY3J0MB8GA1UdIwQYMBaAFEDCvSeOzDSDMKIz1/tss/C0LIDOMCMGA1UdEQQcMBqCDCoua2Vsb3du\\r\\nYS5jYYIKa2Vsb3duYS5jYTAdBgNVHQ4EFgQUEF5c8gyemT/aYylYsq2gimJumOowggGABgorBgEE\\r\\nAdZ5AgQCBIIBcASCAWwBagB3AOg+0No+9QY1MudXKLyJa8kD08vREWvs62nhd31tBr1uAAABf4mM\\r\\njjMAAAQDAEgwRgIhAN+bVp1Nf4tRQ7QkUNdB3XfvN5+5zA5SeJRJRvgkN1H3AiEAwBToqUD09ySi\\r\\nMKGyNCA+gU4VpeQKEQ71YXgEQowOhdEAdwA1zxkbv7FsV78PrUxtQsu7ticgJlHqP+Eq76gDwzvW\\r\\nTAAAAX+JjI9wAAAEAwBIMEYCIQD6ZBKhSjV2bC9QBcbwdKOEHRv2wX/e61MXvLN3ePBIjgIhAP87\\r\\nK4nObHAQgrZ0RPV6ji61EHzWt0Pwjwh287Ms0zECAHYAejKMVNi3LbYg6jjgUh7phBZwMhOFTTvS\\r\\nK8E6V6NS61IAAAF/iYyP0AAABAMARzBFAiEAtgcQJurJ3g8LdvNv2juOZ3U0tyX11iNPhJ4kPsCR\\r\\niosCIEDQrcucbYu2EIlXjUecYcnrUFO7TyvBEaMh3z4//SOKMA0GCSqGSIb3DQEBCwUAA4IBAQAT\\r\\nINkwgzr+oJJAjtUxNDPn7SUuxFdiOQrmnG7/7ZDMeGQ02SLiA+ukDzXXVqOQSlrX7I306xfqou3m\\r\\nNBSbyob53W46yq9hwqYS7PjFMjinyyG3aDX6mdOPtngtO8xfslkIBaSao5EDJC5HpA0KMPAc2xW7\\r\\nlmA/bluIS7a+U0Tbvv7uaZajTRV7KlT+7N2PpNUuMr0ilvB8wZjhJHZtNU2DTvotCPCdNaxTKLLT\\r\\nZc1at2Vc8Z10VrDvGK4JnHEAS6amNWoFPEdjzpbtVVV8F7xl8bJfKE4SwrBzZn8Aq5BcIxMhL5eq\\r\\nmS1dUj/x/4GUETE7ojJYYTE/4XVNzOxjmJc0\"\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Internal Groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalGroups ($input: [InternalGroupInput!]!) {\n    setInternalGroups (input: $input) {\n        internalGroups {\n            name\n            checksum\n            members {\n                name\n            }\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n                \"name\": \"banana_users\",\n                \"checksum\": \"8fe57dbbe1787878be0cf02d3a0ecdbc413ef021\",\n                \"description\": \"Description for  banana_users\"\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Internal User",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteInternalUser($login: String!) {\n  deleteInternalUser(login: $login) {\n    deleted\n  }\n}",
												"variables": "{\n    \"login\": \"banana3\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Internal Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteInternalGroup($name: String!) {\n  deleteInternalGroup(name: $name) {\n    deleted\n  }\n}",
												"variables": "{\n    \"name\": \"TestGroupFoo\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Fip Users",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFipUsers ($input: [FipUserInput!]!) {\n    setFipUsers (input: $input) {\n        detailedStatus{status description}\n        fipUsers {\n            name\n            providerName\n            memberOf{name}\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n                \"name\": \"Johnny\",\n                \"providerName\": \"fip test 2\",\n                \"checksum\": \"23654d13f7591e1427612fdd991adc37a1faa4bf\",\n                \"email\": \"johnny@dirt.com\",\n                \"memberOf\": [{\n                    \"name\": \"group1\"\n                }],\n                \"subjectDn\": \"cn=john\"\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Fip User",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteFipUser($fipName: String!, $userName: String!) {\n  deleteFipUser(fipName: $fipName, userName: $userName) {\n    deleted\n  }\n}",
												"variables": "{\n    \"fipName\" : \"Foo\",\n    \"userName\": \"Johnny\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Fip Groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFipGroups ($input: [FipGroupInput!]!) {\n    setFipGroups (input: $input) {\n        detailedStatus{status description}\n        fipGroups {\n            name\n            checksum\n            members {\n                name\n            }\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n                \"name\": \"group 1\",\n                \"providerName\": \"fip test 2\",\n                \"checksum\": \"8fe57dbbe1787878be0cf02d3a0ecdbc413ef021\",\n                \"description\": \"Description for Test Foo\"\n            }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Fip Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteFipGroup($fipName: String!, $groupName: String!) {\n  deleteFipGroup(fipName: $fipName, groupName: $groupName) {\n    deleted\n  }\n}",
												"variables": "{\n    \"fipName\" : \"Foo\",\n    \"groupName\": \"TestGroupFoo\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This folder has queries and mutations for identity provider-related entity types. The types covered are:\n\n\\*   fips\n\\*   ldap idps\n\\*   fip groups\n\\*   fip users\n\\*   internal groups\n\\*   internal users"
				},
				{
					"name": "Internal Services",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Internal Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalServices (\n    $internalWebApiServices: [WebApiServiceInput!]!,\n    $internalSoapServices: [SoapServiceInput!]!) {\n    setInternalWebApiServices (input: $internalWebApiServices) {\n        detailedStatus {status description}\n        internalWebApiServices {\n            goid \n            name \n            resolutionPath \n            checksum \n        }\n    }\n\n    setInternalSoapServices (input: $internalSoapServices) {\n        detailedStatus {status description}\n        internalSoapServices {\n            goid \n            name \n            resolutionPath \n            resolvers { soapActions baseUri resolutionPath } \n            checksum \n        }\n    }\n}",
												"variables": "{\n  \"internalWebApiServices\": [{\n    \"name\" : \"some-internal-webapi-service\",\n    \"folderPath\" : \"/graphman-tests/internalWebApiServices\",\n    \"resolutionPath\": \"/some-internal-webapi\",\n            \"methodsAllowed\": [\n                \"GET\",\n                \"POST\",\n                \"PUT\",\n                \"DELETE\"\n            ],\n            \"enabled\": true,\n            \"policy\": {\n                \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:Include>\\n            <L7p:Enabled booleanValue=\\\"false\\\"/>\\n            <L7p:PolicyGuid stringValue=\\\"1871928d-c4a3-4456-ab50-b86d3230c908\\\"/>\\n        </L7p:Include>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"553fcf5f-d0a8-4cde-8b6a-a24644d241d0\\\"/>\\n        </L7p:Include>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"ewogInJvbGVzIiA6ICIke3JvbGVzfSIKfQ==\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n            }\n  }],\n\n  \"internalSoapServices\": \n      [{\n        \"name\": \"some-internal-soap-service\",\n                \"folderPath\": \"/graphman-tests/internalSoapServices\",\n                \"resolutionPath\" : \"/some-internal-soap\",\n                \"wsdl\": \"<definitions targetNamespace=\\\"http://warehouse.acme.com/ws\\\" xmlns=\\\"http://schemas.xmlsoap.org/wsdl/\\\" xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\" xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\" xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:s0=\\\"http://warehouse.acme.com/ws\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\" xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n  <types>\\n    <s:schema elementFormDefault=\\\"qualified\\\" targetNamespace=\\\"http://warehouse.acme.com/ws\\\">\\n      <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n      </s:element>\\n      <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n          <s:extension base=\\\"s0:ProductListHeader\\\">\\n            <s:sequence>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"description\\\" type=\\\"s:string\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n            </s:sequence>\\n          </s:extension>\\n        </s:complexContent>\\n      </s:complexType>\\n      <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\" nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n    </s:schema>\\n  </types>\\n  <message name=\\\"listProductsSoapIn\\\">\\n    <part element=\\\"s0:listProducts\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"listProductsSoapOut\\\">\\n    <part element=\\\"s0:listProductsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapIn\\\">\\n    <part element=\\\"s0:getProductDetails\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapOut\\\">\\n    <part element=\\\"s0:getProductDetailsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapIn\\\">\\n    <part element=\\\"s0:placeOrder\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapOut\\\">\\n    <part element=\\\"s0:placeOrderResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapIn\\\">\\n    <part element=\\\"s0:currentOrders\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapOut\\\">\\n    <part element=\\\"s0:currentOrdersResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <portType name=\\\"WarehouseSoap\\\">\\n    <operation name=\\\"listProducts\\\">\\n      <input message=\\\"s0:listProductsSoapIn\\\"/>\\n      <output message=\\\"s0:listProductsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <input message=\\\"s0:getProductDetailsSoapIn\\\"/>\\n      <output message=\\\"s0:getProductDetailsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <input message=\\\"s0:placeOrderSoapIn\\\"/>\\n      <output message=\\\"s0:placeOrderSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <input message=\\\"s0:currentOrdersSoapIn\\\"/>\\n      <output message=\\\"s0:currentOrdersSoapOut\\\"/>\\n    </operation>\\n  </portType>\\n  <binding name=\\\"WarehouseSoap\\\" type=\\\"s0:WarehouseSoap\\\">\\n    <soap:binding style=\\\"document\\\" transport=\\\"http://schemas.xmlsoap.org/soap/http\\\"/>\\n    <operation name=\\\"listProducts\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/listProducts\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/getProductDetails\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/placeOrder\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/currentOrders\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n  </binding>\\n  <service name=\\\"Warehouse\\\">\\n    <port binding=\\\"s0:WarehouseSoap\\\" name=\\\"WarehouseSoap\\\">\\n      <soap:address location=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n    </port>\\n  </service>\\n</definitions>\",\n                \n                \"wssProcessingEnabled\": true,\n                \"enabled\": true,\n                \"methodsAllowed\": [\n                    \"POST\"\n                ],\n                \"policy\": {\n                    \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo staticResourceInfo=\\\"included\\\">\\n                <L7p:Document stringValueReference=\\\"inline\\\"><![CDATA[<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n]]></L7p:Document>\\n                <L7p:OriginalUrl stringValue=\\\"file:/Users/flascelles/Documents/soap/Warehouse_WSDL.wsdl#.xsd1\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo globalResourceInfo=\\\"included\\\">\\n                <L7p:Id stringValue=\\\"http://warehouse.io/mywarehouse\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:HttpRoutingAssertion>\\n            <L7p:ProtectedServiceUrl stringValue=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n            <L7p:RequestHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Cookie\\\"/>\\n                    </L7p:item>\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"SOAPAction\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:RequestHeaderRules>\\n            <L7p:RequestParamRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:ForwardAll booleanValue=\\\"true\\\"/>\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\"/>\\n            </L7p:RequestParamRules>\\n            <L7p:ResponseHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Set-Cookie\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:ResponseHeaderRules>\\n        </L7p:HttpRoutingAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n                }\n      }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Create Web Api Service\n\nCreate a new service on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Internal Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteInternalServices (\n    $internalWebApiServices: [String!]!,\n    $internalSoapServices: [SoapServiceResolverInput!]!) {\n    deleteInternalWebApiServices (resolutionPaths: $internalWebApiServices) {\n        detailedStatus {status description}\n        internalWebApiServices {\n            goid\n            name\n            resolutionPath\n        }\n    }\n\n    deleteInternalSoapServices (resolvers: $internalSoapServices) {\n        detailedStatus {status description}\n        internalSoapServices {\n            goid\n            name\n            resolutionPath\n        }\n    }\n}",
												"variables": "{\n    \"internalWebApiServices\" : [\n        \"/some-internal-webapi\"\n    ],\n    \"internalSoapServices\": \n      [{\n        \"soapAction\": [\n            \"http://warehouse.acme.com/ws/listProducts\",\n            \"http://warehouse.acme.com/ws/getProductDetails\",\n            \"http://warehouse.acme.com/ws/placeOrder\",\n            \"http://warehouse.acme.com/ws/currentOrders\"\n        ],\n        \"baseUri\": \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-internal-soap\"\n      }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Web Api Service\n\nDeletes a Web Api Service given its resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Internal Web API Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServices {\n    internalWebApiServices {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{local_gw}}",
											"host": [
												"{{local_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "All Internal Soap Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalSoapServices {\n    internalSoapServices {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Web API Service by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServiceByName ($name: String!) {\n    internalWebApiServiceByName (name: $name) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-internal-webapi-service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Internal Soap Service by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalSoapServiceByName($name: String!) {\n    internalSoapServiceByName(name : $name) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-internal-soap-service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Web API Service by ResolutionPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServiceByResolutionPath ($resolutionPath: String!) {\n    internalWebApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"resolutionPath\": \"/some-internal-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Internal Services by FolderPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalServicesByFolderPath($folderPath: String!) {\n    internalWebApiServicesByFolderPath(folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n\n    internalSoapServicesByFolderPath(folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "JDBC Connections",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setJdbcConnections($jdbcConnections: [JdbcConnectionInput!]!) {\n    setJdbcConnections(input: $jdbcConnections) {\n        detailedStatus {status description}\n        jdbcConnections {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{  \n  \"jdbcConnections\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8f4\",\n      \"name\": \"some-jdbc-connection\",\n      \"checksum\": \"8a46a8684537d42cee0c24613fd4a6905f43fe83\",\n      \"enabled\": true,\n      \"driverClass\": \"com.mysql.jdbc.Driver\",\n      \"jdbcUrl\": \"jdbc:mysql://some-host:3306/some-db\",\n      \"username\": \"\",\n      \"password\": \"\",\n      \"minPoolSize\": 3,\n      \"maxPoolSize\": 15,\n      \"properties\": [\n        {\n          \"name\": \"EnableCancelTimeout\",\n          \"value\": \"true\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8f6\",\n      \"name\": \"some-other-jdbc-connection\",\n      \"checksum\": \"c2dafbb962fb6ab8a312c44f4a3501a3470adb18\",\n      \"enabled\": true,\n      \"driverClass\": \"com.mysql.jdbc.Driver\",\n      \"jdbcUrl\": \"jdbc:mysql://some-host:3306/some-db\",\n      \"username\": \"some-user\",\n      \"password\": \"JEw3RXYwMiSYdiDXf0GfXyx7xuyVqWlE8yY/G1juFZr9NQTNL2WkYg==\",\n      \"minPoolSize\": 3,\n      \"maxPoolSize\": 15,\n      \"properties\": [\n        {\n          \"name\": \"EnableCancelTimeout\",\n          \"value\": \"true\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set JDBC Connections\n\nSet multiple JDBC Connections altogether"
									},
									"response": []
								},
								{
									"name": "Update JDBC Connection (experimental)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateJdbcConnection($jdbcConnection: JdbcConnectionPartialInput!) {\n    updateJdbcConnection (input: $jdbcConnection) {\n        detailedStatus {status description}\n        jdbcConnection {\n            goid\n            name\n            checksum\n\n            # modified field\n            username \n            password\n            minPoolSize\n        }\n    }\n}",
												"variables": "{\n  \"jdbcConnection\": {\n    \"name\": \"some-other-jdbc-connection\",\n\n    \"username\": \"some-other-user\",\n    \"password\": \"changeit\",\n    \"minPoolSize\": 3\n  }\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteJdbcConnections($jdbcConnections: [String!]!) {\n    deleteJdbcConnections(names: $jdbcConnections) {\n        detailedStatus {status description}\n        jdbcConnections {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"jdbcConnections\": [\n        \"some-jdbc-connection\",\n        \"some-other-jdbc-connection\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete JDBC Connection"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    jdbcConnections {\n        goid \n        name \n        checksum \n        \n        enabled \n        driverClass \n        jdbcUrl \n        username \n        password \n        minPoolSize \n        maxPoolSize \n        properties { name value }\n  }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All JDBC Connections\n\nGet the list of JDBC Connections.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "JDBC Connection By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jdbcConnectionByName($name: String!) {\n    jdbcConnectionByName(name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        driverClass \n        jdbcUrl \n        username \n        password \n        minPoolSize \n        maxPoolSize \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-jdbc-connection\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# JDBC Connections by Name\n\nGet the list of JDBC Connections by Name."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "JMS Destinations",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createMultipleJmsDestination(\n    $jmsDestinations: [JmsDestinationInput!]!) {\n    setJmsDestinations (input: $jmsDestinations) {\n        detailedStatus {status description}\n        jmsDestinations {\n            goid\n            connectionGoid\n            name\n            direction\n            providerType\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"jmsDestinations\": [\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286c98\",\n      \"connectionGoid\": \"1e7c59bab2a9f86d3d5ba39aa8286c96\",\n      \"name\": \"jms-in\",\n      \"direction\": \"INBOUND\",\n      \"providerType\": \"GENERIC JMS\",\n      \"checksum\": \"b05a7b7ce5140e28fd3a8fbb5b7f91f5603345cf\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"inbound.acknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.replyType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.dedicatedConsumerSize\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"inbound.requestMaxSize\",\n          \"value\": \"-1\"\n        },\n        {\n          \"name\": \"inbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"AUTOMATIC\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286c9c\",\n      \"connectionGoid\": \"1e7c59bab2a9f86d3d5ba39aa8286c9a\",\n      \"name\": \"jms-in-mq-customized\",\n      \"direction\": \"INBOUND\",\n      \"providerType\": \"WEBSPHERE MQ OVER LDAP\",\n      \"checksum\": \"e14a2595877139acc01b77733f92a8d4d3f7501d\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"<DEFAULT>\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"inbound.contentTypeSource\",\n          \"value\": \"FREEFORM\"\n        },\n        {\n          \"name\": \"inbound.failureDestination\",\n          \"value\": \"failed-requests-queue\"\n        },\n        {\n          \"name\": \"inbound.acknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.replyType\",\n          \"value\": \"REPLY_TO_OTHER\"\n        },\n        {\n          \"name\": \"inbound.contentTypeValueOrProperty\",\n          \"value\": \"application/json\"\n        },\n        {\n          \"name\": \"inbound.soapActionMessageProperty\",\n          \"value\": \"soap-action-property\"\n        },\n        {\n          \"name\": \"inbound.replyTo\",\n          \"value\": \"reply-queue\"\n        },\n        {\n          \"name\": \"inbound.requestMaxSize\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"inbound.useMessageIdForCorrelation\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286c94\",\n      \"connectionGoid\": \"1e7c59bab2a9f86d3d5ba39aa8286c92\",\n      \"name\": \"jms-out\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"GENERIC JMS\",\n      \"checksum\": \"8784772eb44b8265cbde67adc7de33705c09e6e3\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"SESSION\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286ca0\",\n      \"connectionGoid\": \"1e7c59bab2a9f86d3d5ba39aa8286c9e\",\n      \"name\": \"jms-out-tibco-customized\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"TIBCO EMS\",\n      \"checksum\": \"9ba05d95961b3fedeb5780ee84422715ddc78f1e\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiUsername\": \"jndi-user\",\n      \"jndiPassword\": \"JEw3RXYwMiQfcws5nHaVONkmxL7vysdPauDUm8QyXPnocowf0T4WRg==\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": true,\n        \"sslVerifyServerCertificate\": true,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"00000000000000000000000000000002:ssl\"\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationUsername\": \"dest-user\",\n      \"destinationPassword\": \"JEw3RXYwMiRAL0dFRODuVpoUrJNMDHXRzwx1yAG2IPcBWqIlAo0ASQ==\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": true,\n        \"sslVerifyServerHostname\": true,\n        \"sslClientKeyAlias\": \"00000000000000000000000000000002:ssl\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"CONNECTION\"\n        },\n        {\n          \"name\": \"outbound.poolMinIdleItems\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"outbound.poolMaxSize\",\n          \"value\": \"123\"\n        },\n        {\n          \"name\": \"outbound.poolItemWaitingTime\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"REPLY_TO_OTHER\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"ALWAYS_TEXT\"\n        },\n        {\n          \"name\": \"outbound.replyTo\",\n          \"value\": \"reply-queue\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286ca4\",\n      \"connectionGoid\": \"1e7c59bab2a9f86d3d5ba39aa8286ca2\",\n      \"name\": \"jms-out-weblogic-customized\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"WEBLOGIC JMS\",\n      \"checksum\": \"f99d02b6ae67fd357bb9a309d32f84982ae0e17c\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiUsername\": \"jndi-user\",\n      \"jndiPassword\": \"JEw3RXYwMiTNMWnn7l/KzfEccfn1a0xj7tD2agJH3vshclc7RCc/LA==\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationUsername\": \"dest-user\",\n      \"destinationPassword\": \"JEw3RXYwMiRj9Knqi0IpVBsF6TcoFGOfwiKD0kDhNGfRGDxjjAc06Q==\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"SESSION\"\n        },\n        {\n          \"name\": \"outbound.poolMaxSize\",\n          \"value\": \"123\"\n        },\n        {\n          \"name\": \"outbound.poolMaxIdleItems\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"outbound.poolItemWaitingTime\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"NO_REPLY\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"ALWAYS_BINARY\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set JMS Destinations"
									},
									"response": []
								},
								{
									"name": "Delete JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteJmsDestinations($names: [String!]!) {\n    deleteJmsDestinations(names: $names) {\n        detailedStatus {status description}\n        jmsDestinations {\n            goid\n            connectionGoid\n            name\n            direction\n            providerType\n        }\n    }\n}",
												"variables": "{\n    \"names\": [\n        \"jms-out\", \n        \"jms-out-tibco-customized\",\n        \"jms-out-weblogic-customized\",\n        \"jms-in\", \n        \"jms-in-mq-customized\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete JMS Destinations"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jmsDestinations {\n    jmsDestinations {\n        goid \n        connectionGoid \n        name \n        direction \n        providerType \n        checksum \n        \n        enabled \n        template \n        initialContextFactoryClassname \n        connectionFactoryName \n        jndiUrl \n        jndiUsername \n        jndiPassword\n\n        jndiSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        } \n\n        destinationType \n        destinationName \n        destinationUsername \n        destinationPassword \n\n        destinationSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        }\n\n        properties{  name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All JMS Destinations"
									},
									"response": []
								},
								{
									"name": "JMS Destination By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jmsDestinationByName($name: String!) {\n    # If there are multiple JMS destinations with the same name, use fully qualified name like below\n    # <DIRECTION>.<PROVIDER_TYPE>.<NAME>\n    # Ex: INBOUND.WEBSPHERE MQ OVER LDAP.jms-in-mq-customized\n    jmsDestinationByName(name: $name) {\n        goid \n        connectionGoid \n        name \n        direction \n        providerType \n        checksum \n        \n        enabled \n        template \n        initialContextFactoryClassname \n        connectionFactoryName \n        jndiUrl \n        jndiUsername \n        jndiPassword\n\n        jndiSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        } \n\n        destinationType \n        destinationName \n        destinationUsername \n        destinationPassword \n\n        destinationSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        }\n\n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"name\": \"INBOUND.WEBSPHERE MQ OVER LDAP.jms-in-mq-customized\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# JMS Destination By Name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Listen Ports",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Listen Ports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setListenPorts (\n    $listenPorts: [ListenPortInput!]!, \n    $webApiServices: [WebApiServiceInput!]!) {\n    # Ensure the availability of listen port dependencies\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n        }\n    }\n    setListenPorts (input: $listenPorts) {\n        detailedStatus {status description}\n        listenPorts {\n            goid \n            name \n            checksum \n        }\n    }\n}",
												"variables": "{\n  \"listenPorts\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb91d\",\n      \"name\": \"some-listen-port (18443)\",\n      \"checksum\": \"17d927b2b2a08b9e9508167bf157a7ed352a1a7b\",\n      \"enabled\": true,\n      \"protocol\": \"HTTPS\",\n      \"port\": 18443,\n      \"enabledFeatures\": [\n        \"PUBLISHED_SERVICE_MESSAGE_INPUT\",\n        \"POLICY_MANAGER_ACCESS\",\n        \"POLICY_DOWNLOAD_SERVICE\",\n        \"PING_SERVICE\",\n        \"WS_TRUST_SECURITY_TOKEN_SERVICE\",\n        \"CERTIFICATE_SIGNING_SERVICE\",\n        \"PASSWORD_CHANGING_SERVICE\",\n        \"WSDL_DOWNLOAD_SERVICE\",\n        \"SNMP_QUERY_SERVICE\",\n        \"BUILT_IN_SERVICES\"\n      ],\n      \"tlsSettings\": {\n        \"clientAuthentication\": \"OPTIONAL\",\n        \"tlsVersions\": [\n          \"TLSv1.2\",\n          \"TLSv1.3\"\n        ],\n        \"useCipherSuitesOrder\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"enableWebSocket\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"useExtendedFtpCommandSet\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb923\",\n      \"name\": \"some-other-listen-port (28443)\",\n      \"checksum\": \"dc10ddd137b6e7d94dcc7b1148a79b369437e6fb\",\n      \"enabled\": true,\n      \"protocol\": \"HTTPS\",\n      \"port\": 28443,\n      \"hardwiredServiceName\": \"some-backend\",\n      \"enabledFeatures\": [\n        \"PUBLISHED_SERVICE_MESSAGE_INPUT\",\n        \"POLICY_MANAGER_ACCESS\",\n        \"POLICY_DOWNLOAD_SERVICE\",\n        \"PING_SERVICE\",\n        \"WS_TRUST_SECURITY_TOKEN_SERVICE\",\n        \"CERTIFICATE_SIGNING_SERVICE\",\n        \"PASSWORD_CHANGING_SERVICE\",\n        \"WSDL_DOWNLOAD_SERVICE\",\n        \"SNMP_QUERY_SERVICE\",\n        \"BUILT_IN_SERVICES\"\n      ],\n      \"tlsSettings\": {\n        \"clientAuthentication\": \"REQUIRED\",\n        \"keystoreId\": \"00000000000000000000000000000002\",\n        \"keyAlias\": \"some-host\",\n        \"tlsVersions\": [\n          \"TLSv1.2\",\n          \"TLSv1.3\"\n        ],\n        \"useCipherSuitesOrder\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"threadPoolSize\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"enableWebSocket\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"overrideContentType\",\n          \"value\": \"application/json; charset=utf-8\"\n        },\n        {\n          \"name\": \"useExtendedFtpCommandSet\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        }\n      ]\n    }\n  ],\n  \"webApiServices\": [\n    {\n      \"goid\": \"7d0a6eb0f2f99e29fcc6a9952ec91a2b\",\n      \"name\": \"some-backend\",\n      \"resolutionPath\": \"/some-backend\",\n      \"checksum\": \"08f6226927b32dfebcc6423b58f4fb8f1f406c8d\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Listen Ports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteListenPorts ($listenPorts: [String!]!) {\n    deleteListenPorts (names: $listenPorts) {\n        detailedStatus {status description}\n        listenPorts {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"listenPorts\": [\n        \"some-listen-port (18443)\",\n        \"some-other-listen-port (28443)\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Listen Ports",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPorts {\n    listenPorts {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen Ports by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPortByName ($name : String!) {\n    listenPortByName (name : $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-listen-port\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen Ports by Protocol",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPortsByProtocol ($protocol : String!) {\n    listenPortsByProtocol (protocol : $protocol) {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": "{\n    \"protocol\" : \"HTTPS\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Policy Fragments",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Policy Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicyFragments ($policyFragments: [PolicyFragmentInput!]!) {\n    setPolicyFragments (input: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"policyFragments\": [\n    {\n      \"goid\": \"686319762da9d36e5fa67e004eae301f\",\n      \"guid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n      \"name\": \"some-inner-policy-fragment\",\n      \"checksum\": \"c433b5bbe60a04afae5b16e8e413e0a4ae156d6b\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"goid\": \"686319762da9d36e5fa67e004eae3008\",\n      \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef748\",\n      \"name\": \"some-policy-fragment\",\n      \"checksum\": \"a805042c79f8b55a751e30b87af98ee1ee75504c\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-policy-fragment\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"ffe348a7-8255-4c3b-ba18-021ec626dd0d\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-inner-policy-fragment\\\"/>\\n        </L7p:Include>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Set Policy Fragments - Update Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicyFragmentsForFolderUpdate ($policyFragments: [PolicyFragmentInput!]!) {\n    setPolicyFragments (input: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n            checksum\n\n            folderPath # modified field\n        }\n    }\n}",
												"variables": "{\n  \"policyFragments\": [\n    {\n      \"goid\": \"686319762da9d36e5fa67e004eae301f\",\n      \"guid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n      \"name\": \"some-inner-policy-fragment\",\n      \"checksum\": \"c433b5bbe60a04afae5b16e8e413e0a4ae156d6b\",\n      \"folderPath\": \"/graphman-tests/policyFragments/sub-folder\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Policy Fragment\n\nThis mutation lets you change an existing policy fragment given its name. If no policy fragment with that name exists on target, this will fail.\n\nInput: in this sample we are changing the folder location of an existing policy given the policy name.\n\n``` json\n{  \"name\" : \"New policy somewhere\",  \"input\": {    \"folderPath\" : \"/migrationTest\"  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Policy Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deletePolicyFragments ($policyFragments: [String!]!) {\n    # Known defect: fails to delete \"some-inner-policy-fragment\" policy fragment as it is referenced by other policy fragment.\n    # Work around: try multiple times after seeting the cluster property graphman.mutationErrorsStrategy=continue\n    deletePolicyFragments (names: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"policyFragments\" : [\n        \"some-policy-fragment\",\n        \"some-inner-policy-fragment\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Policy Fragment\n\nDelete a policy fragment given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragments {\n    policyFragments {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Framents\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Fragment By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-policy-fragment\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Fragment and dependencies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy {\n            xml\n            allDependencies {\n                policyFragments {guid name folderPath checksum}\n                encassConfigs {guid name policyName checksum}\n                clusterProperties {name checksum}\n                jdbcConnections {name checksum}\n                # please do consider listing the remaining supported entity types as dependencies\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\": \"some-policy-fragment\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy and its dependencies\n\nRetrieve a policy fragment and all of its dependencies\n\nInput: name (the name of the policy fragment)"
									},
									"response": []
								},
								{
									"name": "Fragments in folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentsByFolderPath ($folderPath: String!) {\n    policyFragmentsByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/policyFragments\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy fragments in a folder\n\nQuery the policy fragments in a folder. This goes through all the subfolders (nested) as well.\n\nInput: folderPath"
									},
									"response": []
								},
								{
									"name": "Fragment By Guid",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByGuid ($guid: ID!) {\n    policyFragmentByGuid (guid: $guid) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef748\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy fragment by guid\n\nGet a policy fragment given its guid (if there is such a policy).\n\nInput: guid"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Scheduled Tasks",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setScheduledTasks(\r\n    $scheduledTasks: [ScheduledTaskInput!]!, \r\n    $backgroundTaskPolicies: [BackgroundTaskPolicyInput!]!) {\r\n    setBackgroundTaskPolicies(input: $backgroundTaskPolicies) {\r\n        detailedStatus {status description}\r\n        backgroundTaskPolicies {\r\n            goid\r\n            guid\r\n            name\r\n            checksum\r\n        }\r\n    }\r\n    setScheduledTasks(input: $scheduledTasks) {\r\n        detailedStatus {status description}\r\n        scheduledTasks {\r\n            goid\r\n            name\r\n            checksum\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n    \"scheduledTasks\": [\r\n        {\r\n            \"name\": \"some-backgroundtask\",\r\n            \"policyName\": \"some-backgroundtask-policy\",\r\n            \"jobType\": \"RECURRING\",\r\n            \"cronExpression\": \"0 0 */1 * * ?\",\r\n            \"executeOnSingleNode\": false,\r\n            \"executeOnCreation\": true,\r\n            \"status\": \"SCHEDULED\"\r\n        },\r\n        {\r\n            \"name\": \"some-other-backgroundtask\",\r\n            \"policyName\": \"some-other-backgroundtask-policy\",\r\n            \"jobType\": \"ONE_TIME\",\r\n            \"executeOnSingleNode\": true,\r\n            \"executeOnCreation\": false,\r\n            \"executionDate\": \"2022-11-16T11:42:16+05:30\",\r\n            \"runAsUser\": \"admin\",\r\n            \"runAsUserProviderName\": \"Internal Identity Provider\"\r\n        }\r\n    ],\r\n    \"backgroundTaskPolicies\": [\r\n    {\r\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286bac\",\r\n      \"guid\": \"2120e6e1-8908-5c63-b8ab-6aeb5fbd97f2\",\r\n      \"name\": \"some-backgroundtask-policy\",\r\n      \"checksum\": \"c03f648b1296d19cca9eeadc567c98fc34d065da\",\r\n      \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\",\r\n      \"soap\": false,\r\n      \"policy\": {\r\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:AuditAssertion/>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"Hello from schedule task-1!\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\r\n      }\r\n    },\r\n    {\r\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286bb0\",\r\n      \"guid\": \"2120e6e1-8908-6c63-b8ab-6aeb5fbd97f2\",\r\n      \"name\": \"some-other-backgroundtask-policy\",\r\n      \"checksum\": \"345896520fb6aef7885bd98e8397c18f4568addd\",\r\n      \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\",\r\n      \"soap\": false,\r\n      \"policy\": {\r\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:AuditAssertion/>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"Hello from schedule task-2!\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\r\n      }\r\n    }\r\n  ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteScheduledTasks($scheduledTasks: [String!]!, $backgroundTaskPolicies: [String!]!) {\r\n    deleteScheduledTasks(names: $scheduledTasks) {\r\n        detailedStatus {status description}\r\n        scheduledTasks {\r\n            goid\r\n            name\r\n        }\r\n    }\r\n\r\n    deleteBackgroundTaskPolicies(names: $backgroundTaskPolicies) {\r\n        detailedStatus {status description}\r\n        backgroundTaskPolicies {\r\n            goid\r\n            guid\r\n            name\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n    \"scheduledTasks\": [\r\n        \"some-backgroundtask\",\r\n        \"some-other-backgroundtask\"\r\n    ],\r\n    \"backgroundTaskPolicies\": [\r\n        \"some-backgroundtask-policy\", \r\n        \"some-other-backgroundtask-policy\"\r\n    ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query scheduledTasks {\r\n    scheduledTasks {\r\n        goid \r\n        name \r\n        checksum \r\n        \r\n        policyName \r\n        jobType \r\n        cronExpression \r\n        executeOnSingleNode \r\n        executeOnCreation \r\n        executionDate \r\n        status \r\n        runAsUser \r\n        runAsUserProviderName\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scheduled Task By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query scheduledTaskByName($name: String!) {\r\n    scheduledTaskByName (name: $name) {\r\n        goid \r\n        name \r\n        checksum \r\n        \r\n        policyName \r\n        jobType \r\n        cronExpression \r\n        executeOnSingleNode \r\n        executeOnCreation \r\n        executionDate \r\n        status \r\n        runAsUser \r\n        runAsUserProviderName\r\n    }\r\n}",
												"variables": "{\r\n    \"name\": \"some-backgroundtask\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPolicies {\r\n    backgroundTaskPolicies {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policy By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPolicyByName($name: String!) {\r\n    backgroundTaskPolicyByName (name: $name) {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": "{\r\n    \"name\": \"some-backgroundtask-policy\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policies By Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPoliciesByFolderPath($folderPath: String!) {\r\n    backgroundTaskPoliciesByFolderPath (folderPath: $folderPath) {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": "{\r\n    \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Secrets",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Secrets",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSecrets ($secrets: [SecretInput!]!) {\n    setSecrets (input: $secrets) {\n        detailedStatus {status description}\n        secrets {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"secrets\": [\n    {\n      \"goid\": \"6a22359b0a051d7b169d0852b3b767e0\",\n      \"name\": \"some-secret\",\n      \"checksum\": \"b2b3c9380a045b5303ecf48dc33469edc4ac52df\",\n      \"description\": \"\",\n      \"secret\": \"JEw3RXYwMiTL3CCAXsTJE82In+1F83TaBw1ngTN/H+hXhbf2tZLgXg==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286b40\",\n      \"name\": \"some-other-secret\",\n      \"checksum\": \"c0fb05640a888b2052555516b2765619972bf4d5\",\n      \"description\": \"openssl compatible\",\n      \"secret\": \"JEw3RXYwMiQR955PvgQBlQIdECpIoOwvRuQKLBAAhXYlPWyjV1FFNQ==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    },\n    {\n      \"goid\": \"1e7c59bab2a9f86d3d5ba39aa8286b42\",\n      \"name\": \"some-other-secrets-1\",\n      \"checksum\": \"bdc5bace7a887ab3cba323e76d214e6279993dca\",\n      \"description\": \"second creation of a password with value hello by setting hello again in clear\",\n      \"secret\": \"JEw3RXYwMiQ1U2HzEzO2QWROGM3/K7J65eP82RBsAOJ8U6xJDjg4xg==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# **Set Secrets**\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Set Keys",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setKeys ($keys: [KeyInput!]!) {\n    setKeys (input: $keys) {\n        detailedStatus {status description}\n        keys {\n            goid\n            keystoreId\n            alias\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"keys\": [\n      {\n      \"goid\": \"00000000000000000000000000000002:some-key\",\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-key\",\n      \"checksum\": \"82fa9aabab38b45e6293c2d891a378113a7ed80c\",\n      \"keyType\": \"RSA\",\n      \"subjectDn\": \"CN=some-key\",\n      \"p12\": \"MIIKKAIBAzCCCdIGCSqGSIb3DQEHAaCCCcMEggm/MIIJuzCCBbIGCSqGSIb3DQEHAaCCBaMEggWfMIIFmzCCBZcGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFF7C7PxT4Z5ViryNm8kRviZsJ+UQAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQhtSjhsEg3la3PBSLME6ajwSCBNDhm0cLaaI2ILytdMSatFzlMxlU5XC6lodEIaj3JWbKm41T0cDEPKjjsBQi3VToszzygLnlx6/4JDtnPYzemlWErmn3UC0fdrPrK1s7DS8j58EFCSMrg3Jf8pazQI+kpWrgJmQgjua7W2QjkleY0VfXoQgckJ/rXSJsbVql8UUKAEck7fftN2oX7YUcfBX4xiVOyrR22tM8/wcDl8wZtkekIVWieMbbsAhaeOUls2va8I6S4vx1s8WcmhCu4RIW2C7q5bIQehKZ3a9EfhDu7FxLsuRnw7z2BlUKWjfr13a8Da01oQtn+gTsaKarnrHUxQEn3EVK89A8PCFLwlNn/X6gl3Fhx/fek90mVoBVM3XajcG5RcuKpddyvo1UQSrFZ0kZQNvG7yFcDGxDns7Chzo2zhv9J3pBg3d33pq31JVEtcd5YXNvfOvinYuh6EuF1COUXGZeLl1ooFLzr5qKrtWCxEma/SJnjx3gG5Q/PGvlZPbVb3GAMcjin/hFL+AkbjMhFjQQP9KEywehfAUNAYQ+WmNVUCaJTiHCKZkGfUFcBRa3BrvkNgdOpcq9nvu5YTBIF9CVlOfKbORRNNRw5NCo8aktzU0TJh9lyRMV3fgMIFUfJdX2ulNjzJJXiYqowUY20ErPCvTiy/941YZlRPrL1DOG2s/Dqz1CH31n9kuP3P1Dt7+s1G7CglGGzY7ORcUh0oQ6mR2qFX/oU+r8nX7WvrYezHRsy7fIeyZ7b6eN1z1aqctMsKY4LqqvwkIaq1e4KyI4dntirJ9d+Tsxr9FRNHyDbXVZoghbFLS/CIypkVBxRP+oRUolq/La/wLHNNqPxMqR1wwzKqgCi8eenA/8DhmkahFsx5GW2W8wrQAoLYcYxzVn03uIb0x7DmdbpIQSjJZQ31KheEOUvt+8Il+JmIkYN6AMZjw6hXB4ZWXJwzp17uMZ5X9A2FJjVloG9mak4dP2Gy6urJyKzhEUFcVSPSHdWd+3F2LOu3xIOS4Q+sYGzsSbrUrJjhmqeFXZaujr5Bg1pTILS9RI2CdPfQYcLZMFnx2vd5cKTTRdRDb8DI+ywbFiLwxjigdiYBfJJFUnXGbVsy8CLvAI3ah9ehEW4kmTXQwAqHm6EvF53wMquw6oDIhaUnBZEPtiAyPZtJ2IJTDzaFYpfxEgIcmQjqXCsLMuYrlkSCGO5mUhGYEGD0VGZSLcRTtMbg1a3NJqsUxVeFkrQnquDKIofQ/M48QE6E2+n+WpIYqEn9461UqVjdWXIktdt2UgwXZjRBiZa2csC50oXfq+hfQxlk8BXgra/Q9iq/gvsTAcLJvUoRQvW7eu3MFxlk8r5hKfkttq3mRSng21PSeEMh4V9fmgdCHqy69viGNsDY1uaZlDFIZWpoqWMhDo7+/9dd/asKdAkCHJJEZn8gUbMI/SbNAra11njUFwlAGjj0Vg6sscb7csvAyGkA3CK9x90xpHblr84W1DfIiiQDF1FSxO/JY98eKFSaTlT+Kfn9DhSO6q05beI3rvKZYh045MEwlRg+2VcO44KEzw0P61HM2fl+g3QZaX+ivkg0ypECYoU9jaOF9aTWp9DQf5PspcaF4O9hwtR4CAzwigGfPGpmWpoizsb3Ag7yyWl43E+pq+ELo2hLgyEjFEMB8GCSqGSIb3DQEJFDESHhAAcwBvAG0AZQAtAGsAZQB5MCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2ODA1OTA3ODkxNDkwggQBBgkqhkiG9w0BBwagggPyMIID7gIBADCCA+cGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUev/+Vv922SKbMh3rEe+Vb9WZ0YkCAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBA0ixkE9pmlGHIVQybKo/mIgIIDcNSrM3urzob0WDrg/BmqCHFBRYrebCJ+Lxa8q23+VhuK8o9CfUBJNdLAv8m7ULbs4XnFamselKKvJxU5Qfryfrb6hwb0TH7Zvj3T5WwvwW9m47B9GrFb3AbmsSMUDJhoIZHyzuD4oLv3G31aW7PZh4DLc4S2gAuesQIvuMhJp9HkRqoQXqxnvCwH9YB8ybvkE6osMjJKVffK7bp8WVn3O160PVYhttD6XXK1TzAqg8T2j1eE6jLXh3ZfLfl4URoXGOJHZ2/95JapDgW/DQi6+ScJdvOMd8Oi/p5CP9B1CzV8Pq8QvrcUR7us0Q4vpmNEWssxy6XyY+lZINkfjdRacyL2/jq1sV9HOaHtXRjnbbm9FFT6f87TYkVPStCZxXU21vgz9PUrE6n7wEfNW1WEcgTgQwdzk5k3qDl5f0llQXX+4ug8QPtgPpsZk2mv5tDmmfMFFR8cS2QxF0k0z0TD6QOgKEIWlRvhm2Fz9P9NxSkPNUO4zw1Iw3FUncCWQF9ptqnhHezjgiIwb7qX0ATv0UTKgRYkW818hnuSZLqCp058HpoLC2J+LUv0VZyXHaBr3RH5KaEbXYI0rtGG24p+MF8BQTA3VqCsRY8qHqsrZ2sSGlLgXG+TERTj+m/k/j+OzAu2AuJPrDs+Jx/7xgxUCOyG+O/IfIz9tRgfOI+WFD6gS2gDhi9bpLN0+xKMg+gpRdpnv+NRmhlSxbUF0YmAOchKTKLjRUo2Vv5n52a5upBQoLmibh76Zn7CUL1lzuUVn9+BeWRrUlrub/weyjtav5S4tM2BgpwekhbaDQWlQHr63cXI5w+Khv5DaDT9Yc58h8I2ZDOcA2JlxPIydzFgMe4suBqo9auEpvDzDJk+OCLjkAXmrmK4PEB+JTdG2hzzx1kM1CrcNpE0TLNMWmrfrwNLUQ/ex0SjQCN4XROOmMMwD9649jH/WT9Nk5gHzeqC5Et8SHK0A0+j/8scHyMW//0YuXEW4MLrUgy8mPJ6RZ6Q2GQlSLTnAa2SFN9ADs0y5gryzCyVAkuvG7n5AqP4iyxUqc6OPCeZ0Ygc4MITxash577hsVmtL1pPdv8tQSFGrDg8S2PBtro+lBV5TI/jSM7i5QMfl6adNS9SpjKERUMVvPZaK7uM/gCAJsHrLmqRxiJlUuHKOFVs1XeBqkRBbSIwTTAxMA0GCWCGSAFlAwQCAQUABCBYScQDMTTZDOB6zc7R4o3iZXhvMBJocBpVSG/Y5nkT8QQUFtq5fjMA/38+WrpOxN7iHIjb/z0CAicQ\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIC6zCCAdOgAwIBAgIJAPBYDK3qjfM1MA0GCSqGSIb3DQEBDAUAMBMxETAPBgNVBAMTCHNvbWUt\\r\\na2V5MB4XDTIzMDQwNDA1NDU1M1oXDTI4MDQwMjA1NDU1M1owEzERMA8GA1UEAxMIc29tZS1rZXkw\\r\\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCADgFxsGgmoRefiq4dMzfgy0minfIw98PP\\r\\nco/gJtvAXdW/0ZamjpGNhepq3LJ0rNonXrbpOJSn9nBtcAmQQdDq9rMWVXbh11OJH7BfeGs2vFSU\\r\\nPXV9P0K/8w/X5xFaKZ8/qhQVLLyOq8gGjCk3NS7XTMmA+9jjkoxzqNDvRVRw7mEFRFxgIJOuPBBL\\r\\nTpBKjiCxdfFbcV9r2ZQyf0a/UO+M7UIGuFFJxHTtdtp0PBZAhJ/wf6oIyMeeCNSkYmLYI9v8Sne5\\r\\n4oRiIFTJ0BrnIA/7PNyjiaDejfy6TmrqmtV85cn3wxorC8tOfUv1PsOv1FGqBbbYvQ7lh5ybVLL7\\r\\nefGTAgMBAAGjQjBAMB0GA1UdDgQWBBQL2fCUg0lRk4HWwBBr35SyKSQ70jAfBgNVHSMEGDAWgBQL\\r\\n2fCUg0lRk4HWwBBr35SyKSQ70jANBgkqhkiG9w0BAQwFAAOCAQEAELwHue6qGlrWpfJc3rq3Pby7\\r\\nNwjI7VEANcWHM5WVQ0TX5+Hm/P+GIyxr4WFA356nnUeGCe3owCWv3Y3yRva715Jf6JUofYCNgvk7\\r\\nuUoQgLmTIe2s4GguuX7ATVAEMz5EM1EmcapGgrfoEbWFTEemUr1nvu19LSDgVzKJhvVpWvWwCQGr\\r\\nX2lipOGuZrgGumW+AaTATLpxCasG3aP3IqdGaMs+ALi07CM9b/JD+XPRAp1B7yYrFTGYbftfvBeJ\\r\\nKfKiC2YoJKNJcNXMsz3yhGfvVbZrSG5LZIgCjqsDJ0EoCXMzpR3AACHbF9p4ummEbrAOmse1lx6u\\r\\nPh9PhFwPx2XmUg==\\n-----END CERTIFICATE-----\\n\"\n      ]\n    },\n    {\n      \"goid\": \"00000000000000000000000000000002:some-other-key\",\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-other-key\",\n      \"checksum\": \"8a60f31ce6a81b31fda5463e7619fb0e9e0882e0\",\n      \"keyType\": \"EC\",\n      \"subjectDn\": \"CN=some-other-key\",\n      \"p12\": \"MIID8AIBAzCCA5oGCSqGSIb3DQEHAaCCA4sEggOHMIIDgzCCASoGCSqGSIb3DQEHAaCCARsEggEXMIIBEzCCAQ8GCyqGSIb3DQEMCgECoIGtMIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBQxGCtXH6cGnKxWKl4IoYrPM4a8zAICJxACASAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEBmvSParqbC61KSkqqmhn04EQHOy+nmq0mGF9b7TM6AjitkQen61iXQJurmfDG4rHJp4D9FsCg/PVpwTKSkhE3TRHU61ov6uQ2FAVIYu8t59RMwxUDArBgkqhkiG9w0BCRQxHh4cAHMAbwBtAGUALQBvAHQAaABlAHIALQBrAGUAeTAhBgkqhkiG9w0BCRUxFAQSVGltZSAxNjgwNTkwNzg5MTkwMIICUQYJKoZIhvcNAQcGoIICQjCCAj4CAQAwggI3BgkqhkiG9w0BBwEwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFDGPPH0g+ax3vMgU+9v8PsUwYsfDAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQdJuLH5mdU8wVBz6OSHXY4YCCAcBNrX7T3S3ywfmC1idUK4s88NsUkzVhmkksrJvS/HgXzddKSbZw4vWU5aORFkMGCYEkADLiPDjkIeqeh9yOiz3zUgjptz8vSfAV4RFR+fh6cn4iSEy6XGYP0SqIaNpdtx0Pa3SudY9rZxiSqWgYy3FW9TBKfGHSGl39xXB1mStm0SO0Wh6ziub06kVchvmoK4B8cDcHehcNhBiT6B9Ki2jjdzcuQQoK3wpQEBoW8KsTekS34Mq7h0Q9xdJfT6QJbKmoVv6mMqJdgBbx8dPOTKh+kV9NFWKmPsmZrNWj42tRMPm5DvO5IJn8YXocvntTQvkazyUbLOu6VOkG/qk3f1t9Ss/PgPyx+9qqaIgF7tmieKdqKTCH4y5pdQQMSev5VRj4Acefh6OrBtzFPJ662DUYS7NJssPD2/WP4dZEij2RV18nNv20p3791SMLOFWOG6Y15hQwrSKK6PMhKaV5QP1DR2t5wOeCaMbIT5aOTxY/v01L8lNF4NoE43uBEc4zMQt5FSUqrTucGUqp9eeE56mpUrtAC6dcsI6RZmubda8RRXz2Qful8PYUQeD7cx+4aFoBMECsDiTVQCNnCZfJZ7lqME0wMTANBglghkgBZQMEAgEFAAQgLSP2Pb2Yen6Q35Uxe6EL0j/OuLLZQFZ5tfaaEIgNIVcEFP8TIly0kAZqVvs58XgzeqNzit3cAgInEA==\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIBNzCB9qADAgECAghlKhmgL8tv2DAJBgcqhkjOPQQBMBkxFzAVBgNVBAMTDnNvbWUtb3RoZXIt\\r\\na2V5MB4XDTIzMDQwNDA1NDYxNloXDTI4MDQwMjA1NDYxNlowGTEXMBUGA1UEAxMOc29tZS1vdGhl\\r\\nci1rZXkwQDAQBgcqhkjOPQIBBgUrgQQAAQMsAAQCKUXlPr3rWVvwhZYdkgOKagmCTp4F10+4WiFg\\r\\nu9kifLdH9HX4sqYS7yqjQjBAMB0GA1UdDgQWBBSfiaYzK5+p/U34aoidHIhHN4+tRzAfBgNVHSME\\r\\nGDAWgBSfiaYzK5+p/U34aoidHIhHN4+tRzAJBgcqhkjOPQQBAzEAMC4CFQM21XdG/IO9i2ucVL/2\\r\\nJ/JSpGdiHQIVAw8fUf/2dAD0eu6NfvutzsbGJqQW\\n-----END CERTIFICATE-----\\n\"\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Keys\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Delete Secrets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSecrets($secrets: [String!]!) {\n  deleteSecrets(names: $secrets) {\n    detailedStatus {status description}\n    secrets {\n        goid\n        name\n    }\n  }\n}",
												"variables": "\n{\n    \"secrets\": [\n        \"some-secret\", \n        \"some-other-secret\", \n        \"some-other-secrets-1\"\n    ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Secret"
									},
									"response": []
								},
								{
									"name": "Delete Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteKeys($keys: [String!]!) {\n  deleteKeys(aliases: $keys) {\n    detailedStatus {status description}\n    keys { \n        goid \n        keystoreId \n        alias \n    }\n  }\n}",
												"variables": "{\n    \"keys\": [\n        \"some-key\", \n        \"00000000000000000000000000000002:some-other-key\"\n    ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Key"
									},
									"response": []
								},
								{
									"name": "Set Key - Replace Cert Chain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setKeysForCertChain ($keys: [KeyInput!]!) {\n    # setKeys doesn't support updating more than one key in a single request. \n    # Please consider updating them one at a time.\n    # NOTE: creating keys in multiple has no such limitation.\n    setKeys (input: $keys) {\n        detailedStatus {status description}\n        keys {\n            goid\n            keystoreId\n            alias\n            checksum\n\n            certChain # modified field\n        }\n    }\n}",
												"variables": "{\n  \"keys\": [\n    {\n      \"goid\": \"00000000000000000000000000000002:some-key\",\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-key\",\n      \"keyType\": \"RSA\",\n      \"subjectDn\": \"CN=some-key\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIDDDCCAfSgAwIBAgIJAOezkQ/7B1gWMA0GCSqGSIb3DQEBDAUAMBYxFDASBgNVBAMTC3NvbWUt\\r\\nc2lnbmVyMB4XDTIzMDQwNDA1NTIyMFoXDTI1MDQwMzA1NTIyMFowEzERMA8GA1UEAxMIc29tZS1r\\r\\nZXkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCADgFxsGgmoRefiq4dMzfgy0minfIw\\r\\n98PPco/gJtvAXdW/0ZamjpGNhepq3LJ0rNonXrbpOJSn9nBtcAmQQdDq9rMWVXbh11OJH7BfeGs2\\r\\nvFSUPXV9P0K/8w/X5xFaKZ8/qhQVLLyOq8gGjCk3NS7XTMmA+9jjkoxzqNDvRVRw7mEFRFxgIJOu\\r\\nPBBLTpBKjiCxdfFbcV9r2ZQyf0a/UO+M7UIGuFFJxHTtdtp0PBZAhJ/wf6oIyMeeCNSkYmLYI9v8\\r\\nSne54oRiIFTJ0BrnIA/7PNyjiaDejfy6TmrqmtV85cn3wxorC8tOfUv1PsOv1FGqBbbYvQ7lh5yb\\r\\nVLL7efGTAgMBAAGjYDBeMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgXgMB0GA1UdDgQWBBQL\\r\\n2fCUg0lRk4HWwBBr35SyKSQ70jAfBgNVHSMEGDAWgBQx+VXhLd2Gl9GiDj+L5TisB1i2DzANBgkq\\r\\nhkiG9w0BAQwFAAOCAQEAJ41Fh+tYbJgQ4kVeDBNdHm4IC1fIIUoRJdrgyueKGSL2rQCWHFrMrG+k\\r\\nXw2r7270Nz/iqf6tHzRJTK1c9pwsfgz1kL2hMwWfDY9IDYHQqCGUXxXK+0xGBooQ1zXCKxqKOZAA\\r\\nYdIQkEX8fEmynBCQ2gInDoK0M024+tYMtinVKSlIdKvsfxfQceQaUqQ0wBwrwPpbBBS27VZuSpqH\\r\\ng4aZkOCRpnbAKQsFiCAFE7HrmaRtBKVSgKQOuSHKGlvKO9RufMJ/3h6Ga8YuYuwWydCOktbjCdYk\\r\\nNQkYKqP6XZ04YogVo7N2ImFhMaTUay23yLqafmUwQj34TlMmbKnql8a72Q==\\n-----END CERTIFICATE-----\\n\",\n        \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIIdAjqLho2MBUwDQYJKoZIhvcNAQEMBQAwFjEUMBIGA1UEAxMLc29tZS1z\\r\\naWduZXIwHhcNMjMwNDA0MDU1MTQ4WhcNMjgwNDAyMDU1MTQ4WjAWMRQwEgYDVQQDEwtzb21lLXNp\\r\\nZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIpbd3x5gBMI+5NDmGhypWg6kGiF\\r\\n/6QqV1vqdEMenhBVVDg61e1KuXPKwN0uGoIAAkgW6A5XGWMELWG9vXU8LHRgaeykX9zsbH18q/aY\\r\\nwIIrtVqM6ZL+NpLyjl24h07AG6e8RRr05STnNWxKz7/IHfBeU8Iil/oE+ujZ1yK1xyF6XTMdSea4\\r\\nZcjdd5OKUyjihrJa0jqgCMxUKDL1UZn0HHprP3QbotA7GDttx9b9Hd6Ik1YWfu7OLMjq7wrCmk9D\\r\\nvT1VpBNx2DxKMHOg04dMtqfrpuvKjXCf4WBh+0oJ/JPZqRSwzyZPFom5sR0t9r/PWtZHBvWXchK8\\r\\nVmzKSjzRCHkCAwEAAaNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwHQYD\\r\\nVR0OBBYEFDH5VeEt3YaX0aIOP4vlOKwHWLYPMB8GA1UdIwQYMBaAFDH5VeEt3YaX0aIOP4vlOKwH\\r\\nWLYPMA0GCSqGSIb3DQEBDAUAA4IBAQBd7hIpeWqwQ4ObIjv64/ZQC+orIjZg9e4qVNOMnz4WkbqX\\r\\nR/d0BsJPikXsVAyi6cv1I8bWVSjycuCtiPJJfovEfa+/mJQY9Rr8b/ClYUU7UpA1QhWJ1d0467g2\\r\\nz8raKlv8IyGD9GJg92TcaytSPs7SX0Hf/uUsGc0AdIk8SrwM33AC92BPfO3bleP9WjyOcqjVOtKj\\r\\nFAgIF5+a9ngeSKBwKv5aMe8kEQt7YevLY4MbrU81zGrMc30Gb/OFqtk4TqT6eF2RL3yGkBr3RsVh\\r\\nECUdfiWGHmH0rQ6QNTlHiyhaU1z+VjCJycs0w7WmHZs8HKrdbhv+lSbd9TRZZFA7/JUX\\n-----END CERTIFICATE-----\\n\"\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Secrets",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query secrets {\n    secrets {\n        goid\n        name\n        checksum\n\n        description\n        secret\n        secretType\n        variableReferencable\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Secrets\n\nGet all the secrets\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Secret By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query secretByName($name: String!) {\n    secretByName(name : $name) {\n        goid\n        name\n        checksum\n\n        description\n        secret\n        secretType\n        variableReferencable\n    }\n}",
												"variables": "{\n    \"name\": \"some-secret\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get secret by name\n\nGet secret by name\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Keys",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query keys {\n    keys {\n        goid\n        keystoreId\n        alias\n        checksum\n\n        keyType\n        subjectDn\n        p12\n        certChain\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Keys\n\nGet all keys.\n\nThis is an entry in the gateway keystore. These entries combine a private key and associated certificate and are used for example by listener ports.\n\nThese represent the gateway's own certificates as opposed to the Certificate type which represent a cert trusted by the gateway.\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Key By Alias",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query keyByAlias($alias: String!) {\n    keyByAlias(alias : $alias) {\n        goid\n        keystoreId\n        alias\n        checksum\n\n        keyType\n        subjectDn\n        p12\n        certChain\n    }\n}",
												"variables": "{\n     \"alias\": \"some-key\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get key by alias\n\nGet key by alias.\n\nThis is an entry in the gateway keystore. These entries combine a private key and associated certificate and are used for example by listener ports.\n\nThese represent the gateway's own certificates as opposed to the Certificate type which represent a cert trusted by the gateway.\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Siteminder Configurations",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSMConfigs($smConfigs: [SMConfigInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability of cassandra connection's dependencies\n    setSecrets(input: $secrets) {\n        detailedStatus {status description}\n        secrets {\n            goid\n            name\n            checksum\n        }\n    }\n\n    setSMConfigs (input : $smConfigs){\n        detailedStatus {status description}\n        smConfigs {\n            goid \n            name \n            checksum \n        }\n    }\n}",
												"variables": "{\n  \"smConfigs\": [\n    {\n      \"goid\": \"26c008c30b117ce17a4fec839e968555\",\n      \"name\": \"some-smconfig\",\n      \"enabled\": true,\n      \"agentHost\": \"some-smhost\",\n      \"agentIP\": \"127.0.0.1\",\n      \"agentHostConfig\": \"DefaultHostSettings\",\n      \"agentSecret\": \"Y2hhbmdlaXQ=\",\n      \"cryptoMode\": \"MIGRATE\",\n      \"ipCheckEnabled\": false,\n      \"updateSSOToken\": false,\n      \"clusterFailoverThreshold\": 50,\n      \"nonClusterFailover\": false,\n      \"username\": \"some-user\",\n      \"securePasswordName\": \"some-pwd\",\n      \"properties\": [\n        {\n          \"name\": \"server.0.0.accounting.port\",\n          \"value\": \"44441\"\n        },\n        {\n          \"name\": \"server.0.0.timeout\",\n          \"value\": \"60\"\n        },\n        {\n          \"name\": \"server.0.0.connection.step\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"server.0.0.authorization.port\",\n          \"value\": \"44443\"\n        },\n        {\n          \"name\": \"server.0.0.connection.min\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"server.0.0.connection.max\",\n          \"value\": \"3\"\n        },\n        {\n          \"name\": \"server.0.0.address\",\n          \"value\": \"apimsm128compat.lvn.broadcom.net\"\n        },\n        {\n          \"name\": \"server.0.0.authentication.port\",\n          \"value\": \"44442\"\n        }\n      ]\n    }\n  ],\n  \"secrets\": [\n    {\n      \"goid\": \"e676853df827149ba8def53a035084ce\",\n      \"name\": \"some-pwd\",\n      \"checksum\": \"f208cd65c82d6955d00d32a9af4d0f3ded6c6ff0\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Delete SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSMConfigs($smConfigs: [String!]!) {\n    deleteSMConfigs(names : $smConfigs) {\n        detailedStatus {status description}\n        smConfigs {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"smConfigs\" : [\"some-smconfig\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query smConfigs {\n    smConfigs {\n        goid \n        name \n        checksum \n        \n        enabled \n        agentHost \n        agentIP \n        agentHostConfig \n        agentSecret \n        cryptoMode \n        ipCheckEnabled \n        updateSSOToken \n        clusterFailoverThreshold \n        nonClusterFailover \n        username \n        securePasswordName \n        properties { name value }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "SM Config by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query smConfigByName($name : String!) {\n    smConfigByName(name : $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        agentHost \n        agentIP \n        agentHostConfig \n        agentSecret \n        cryptoMode \n        ipCheckEnabled \n        updateSSOToken \n        clusterFailoverThreshold \n        nonClusterFailover \n        username \n        securePasswordName \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-smconfig\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Soap Services",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSoapServices ($input: [SoapServiceInput!]!) {\n    setSoapServices (input: $input) {\n        detailedStatus {status description}\n        soapServices {\n            goid\n            name\n            resolutionPath\n            resolvers {baseUri}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n        \"name\": \"some soap service\",\n                \"folderPath\": \"/graphman-tests/soapServices\",\n                \"resolutionPath\" : \"/some-soap\",\n                \"wsdl\": \"<definitions targetNamespace=\\\"http://warehouse.acme.com/ws\\\" xmlns=\\\"http://schemas.xmlsoap.org/wsdl/\\\" xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\" xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\" xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:s0=\\\"http://warehouse.acme.com/ws\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\" xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n  <types>\\n    <s:schema elementFormDefault=\\\"qualified\\\" targetNamespace=\\\"http://warehouse.acme.com/ws\\\">\\n      <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n      </s:element>\\n      <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n          <s:extension base=\\\"s0:ProductListHeader\\\">\\n            <s:sequence>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"description\\\" type=\\\"s:string\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n            </s:sequence>\\n          </s:extension>\\n        </s:complexContent>\\n      </s:complexType>\\n      <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\" nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n    </s:schema>\\n  </types>\\n  <message name=\\\"listProductsSoapIn\\\">\\n    <part element=\\\"s0:listProducts\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"listProductsSoapOut\\\">\\n    <part element=\\\"s0:listProductsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapIn\\\">\\n    <part element=\\\"s0:getProductDetails\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapOut\\\">\\n    <part element=\\\"s0:getProductDetailsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapIn\\\">\\n    <part element=\\\"s0:placeOrder\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapOut\\\">\\n    <part element=\\\"s0:placeOrderResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapIn\\\">\\n    <part element=\\\"s0:currentOrders\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapOut\\\">\\n    <part element=\\\"s0:currentOrdersResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <portType name=\\\"WarehouseSoap\\\">\\n    <operation name=\\\"listProducts\\\">\\n      <input message=\\\"s0:listProductsSoapIn\\\"/>\\n      <output message=\\\"s0:listProductsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <input message=\\\"s0:getProductDetailsSoapIn\\\"/>\\n      <output message=\\\"s0:getProductDetailsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <input message=\\\"s0:placeOrderSoapIn\\\"/>\\n      <output message=\\\"s0:placeOrderSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <input message=\\\"s0:currentOrdersSoapIn\\\"/>\\n      <output message=\\\"s0:currentOrdersSoapOut\\\"/>\\n    </operation>\\n  </portType>\\n  <binding name=\\\"WarehouseSoap\\\" type=\\\"s0:WarehouseSoap\\\">\\n    <soap:binding style=\\\"document\\\" transport=\\\"http://schemas.xmlsoap.org/soap/http\\\"/>\\n    <operation name=\\\"listProducts\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/listProducts\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/getProductDetails\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/placeOrder\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/currentOrders\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n  </binding>\\n  <service name=\\\"Warehouse\\\">\\n    <port binding=\\\"s0:WarehouseSoap\\\" name=\\\"WarehouseSoap\\\">\\n      <soap:address location=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n    </port>\\n  </service>\\n</definitions>\",\n                \n                \"wssProcessingEnabled\": true,\n                \"methodsAllowed\": [\n                    \"POST\"\n                ],\n                \"policy\": {\n                    \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo staticResourceInfo=\\\"included\\\">\\n                <L7p:Document stringValueReference=\\\"inline\\\"><![CDATA[<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n]]></L7p:Document>\\n                <L7p:OriginalUrl stringValue=\\\"file:/Users/flascelles/Documents/soap/Warehouse_WSDL.wsdl#.xsd1\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo globalResourceInfo=\\\"included\\\">\\n                <L7p:Id stringValue=\\\"http://warehouse.io/mywarehouse\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:HttpRoutingAssertion>\\n            <L7p:ProtectedServiceUrl stringValue=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n            <L7p:RequestHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Cookie\\\"/>\\n                    </L7p:item>\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"SOAPAction\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:RequestHeaderRules>\\n            <L7p:RequestParamRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:ForwardAll booleanValue=\\\"true\\\"/>\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\"/>\\n            </L7p:RequestParamRules>\\n            <L7p:ResponseHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Set-Cookie\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:ResponseHeaderRules>\\n        </L7p:HttpRoutingAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n                }\n      }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Soap Services\n\nSet multiple Soap services altogether on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{\n  \"input\": [\n      {\n        \"name\": \"Warehouse_eh\",\n                \"folderPath\": \"/\",\n                \"resolutionPath\" : \"/testsoap\",\n                \"wsdl\": \"\\n  \\n    \\n      \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n        \\n      \\n      \\n        \\n          \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n              \\n              \\n              \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n            \\n            \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n        \\n      \\n      \\n        \\n          \\n          \\n          \\n          \\n          \\n          \\n        \\n      \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n  \\n  \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n  \\n  \\n    \\n      \\n    \\n  \\n\",\n                \n                \"wssProcessingEnabled\": true,\n                \"methodsAllowed\": [\n                    \"POST\"\n                ],\n                \"policy\": {\n                    \"xml\": \"\\n\\n    \\n        \\n            \\n                \\n\\n    \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n        \\n    \\n    \\n        \\n            \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n                    \\n                    \\n                    \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n                \\n                \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n        \\n    \\n    \\n        \\n            \\n            \\n            \\n            \\n            \\n            \\n        \\n    \\n\\n]]>\\n                \\n            \\n            \\n        \\n        \\n            \\n                \\n            \\n            \\n        \\n        \\n            \\n            \\n                \\n                    \\n                        \\n                    \\n                    \\n                        \\n                    \\n                \\n            \\n            \\n                \\n                \\n            \\n            \\n                \\n                    \\n                        \\n                    \\n                \\n            \\n        \\n    \\n\\n\"\n                }\n      }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSoapServices ($soapServices: [SoapServiceResolverInput!]!) {\n    deleteSoapServices (resolvers: $soapServices) {\n        detailedStatus {status description}\n    }\n}",
												"variables": "{\n  \"soapServices\": \n      [{\n        \"soapAction\": \"http://warehouse.acme.com/ws/listProducts\",\n        \"baseUri\" : \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-soap\"\n      }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Soap Service"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServices {\n    soapServices {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Soap Services"
									},
									"response": []
								},
								{
									"name": "Soap Services in Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServicesByFolderPath ($folderPath: String!) {\n    soapServicesByFolderPath (folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/soapServices\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Services in Folder"
									},
									"response": []
								},
								{
									"name": "Soap Service by Resolver",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServiceByResolver ($resolver: SoapServiceResolverInput!) {\n    soapServiceByResolver (resolver: $resolver) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n  \"resolver\": \n      {\n        \"soapAction\": \"http://warehouse.acme.com/ws/listProducts\",\n        \"baseUri\" : \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-soap\"\n      }\n  \n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Service by Resolver"
									},
									"response": []
								},
								{
									"name": "Soap Services by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServicesByName ($name: String!) {\n    soapServicesByName (name: $name) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some soap service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Services by Name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Trusted Certs",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Certificates",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setTrustedCerts ($trustedCerts: [TrustedCertInput!]!) {\n    # Ensure the availability of Trusted Cert dependencies (Revocation Checking Policy)\n    setTrustedCerts (input: $trustedCerts) {\n        detailedStatus {status description}\n        trustedCerts {\n            goid\n            name\n            subjectDn\n            thumbprintSha1\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"trustedCerts\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb941\",\n      \"name\": \"some-trusted-cert\",\n      \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\",\n      \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n      \"checksum\": \"af9fd03111e41e92a51ac3681362defafd90e528\",\n      \"verifyHostname\": false,\n      \"trustAnchor\": false,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"USE_DEFAULT\",\n      \"notBefore\": \"2023-01-13T00:00:00Z\",\n      \"notAfter\": \"2024-02-13T23:59:59Z\",\n      \"certBase64\": \"MIIHSjCCBjKgAwIBAgIQDB/LGEUYx+OGZ0EjbWtz8TANBgkqhkiG9w0BAQsFADBPMQswCQYDVQQG\\r\\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMSkwJwYDVQQDEyBEaWdpQ2VydCBUTFMgUlNBIFNI\\r\\nQTI1NiAyMDIwIENBMTAeFw0yMzAxMTMwMDAwMDBaFw0yNDAyMTMyMzU5NTlaMIGWMQswCQYDVQQG\\r\\nEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLTG9zIEFuZ2VsZXMxQjBABgNVBAoM\\r\\nOUludGVybmV0wqBDb3Jwb3JhdGlvbsKgZm9ywqBBc3NpZ25lZMKgTmFtZXPCoGFuZMKgTnVtYmVy\\r\\nczEYMBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\r\\nAQEAwoB3iVm4RW+6StkR+nutx1fQevu2+t0Fu6KBcbvhfyHSXy7w0nJOdTT4jWLjStpRkNQBPZwM\\r\\nwHH35i+21gdnJtDe/xfO8IX9McFmyodlBUcqX8CruIzDv9AXf2OjXPBG+4aq+03XKl5/muATl32+\\r\\n+301Vw1dXoGYNeoWQqLTsHT3WS3tOOf+ehuzNuZ+rj+ephaD3lMBToEArrtC9R91KTTN6YSAOK48\\r\\nNxTA8CfOMFK5itxfIqB5+E9OSQTidXyqLyoeA+xxTKMqYfxvypEek1oueAhY9u67NCBdmuavxtfy\\r\\nvwp7+o6Sd+NsewxAhmRKFexw13KOYzDhC+9aMJcuJQIDAQABo4ID2DCCA9QwHwYDVR0jBBgwFoAU\\r\\nt2ui6qiqhIx56rTaD5iyxZV2ufQwHQYDVR0OBBYEFLCTP+gXgv1ssrYXh8vjgP6CmwGeMIGBBgNV\\r\\nHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUubmV0ggtleGFtcGxlLmVkdYILZXhhbXBs\\r\\nZS5jb22CC2V4YW1wbGUub3Jngg93d3cuZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3\\r\\nLmV4YW1wbGUubmV0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\\r\\nAwIwgY8GA1UdHwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0\\r\\nVExTUlNBU0hBMjU2MjAyMENBMS00LmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t\\r\\nL0RpZ2lDZXJ0VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDA+BgNVHSAENzA1MDMGBmeBDAECAjAp\\r\\nMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwfwYIKwYBBQUHAQEEczBx\\r\\nMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wSQYIKwYBBQUHMAKGPWh0dHA6\\r\\nLy9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU1JTQVNIQTI1NjIwMjBDQTEtMS5jcnQw\\r\\nCQYDVR0TBAIwADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYA7s3QZNXbGs7FXLedtM0TojKH\\r\\nRny87N7DUUhZRnEftZsAAAGFq0gFIwAABAMARzBFAiEAqt+fK6jFdGA6tv0EWt9rax0WYBV4re9j\\r\\ngZgq0zi42QUCIEBh1yKpPvgX1BreE0wBUmriOVUhJS77KgF193fT2877AHcAc9meiRtMlnigIH1H\\r\\nneayxhzQUV5xGSqMa4AQesF3crUAAAGFq0gFnwAABAMASDBGAiEA12SUFK5rgLqRzvgcr7ZzV4nl\\r\\n+Zt9lloAzRLfPc7vSPACIQCXPbwScx1rE+BjFawZlVjLj/1PsM0KQQcsfHDZJUTLwAB2AEiw42va\\r\\npkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABhatIBV4AAAQDAEcwRQIhAN5bhHthoyWMJ3CQ\\r\\nB/1iYFEhMgUVkFhHDM/nlE9ThCwhAiAPvPJXyp7a2kzwJX3P7fqH5Xko3rPhCzRoXYd6W+QkCjAN\\r\\nBgkqhkiG9w0BAQsFAAOCAQEAWeRK2KmCuppK8WMMbXYmdbM8dL7F9z2nkZL4zwYtWBDt87jW/Gz/\\r\\nE5YyzU/phySFC3SiwvYP9afYfXaKrunJWCtuAG+5zSTuxELFTBaFnTRhOSO/xo6VyYSpsuVBD0R4\\r\\n15W5z9l0v1hP5xb/fEAwxGxOIk3Lg2c6k78rxcWcGvJDoSU7hPb3U26oha7eFHSRMAYN8gfUxAi6\\r\\nQ2TF4j/arMVBr6Q36EJ2dPcTu0p9NlmBm8dE34lzuTNC6GDCTWFdEloQ9u//M4kUUOjWn8a5XCs1\\r\\n263t3Ta2JfKViqxpP5r+GvgVKG3qGFrC0mIYr0B4tfpeCY9T+cz4I6GDMSP0xg==\"\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb943\",\n      \"name\": \"some-other-trusted-cert\",\n      \"subjectDn\": \"cn=sni.cloudflaressl.com,o=cloudflare\\\\, inc.,l=san francisco,st=california,c=us\",\n      \"thumbprintSha1\": \"KCjaydt1qoeF9KZJxM0pDgBAd1U=\",\n      \"checksum\": \"a8611175c7960b660e1957e330b9882c548c822e\",\n      \"verifyHostname\": true,\n      \"trustAnchor\": true,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"SPECIFIED\",\n      \"revocationCheckPolicyName\": \"some revocation checking policy\",\n      \"notBefore\": \"2022-05-28T00:00:00Z\",\n      \"notAfter\": \"2023-05-28T23:59:59Z\",\n      \"certBase64\": \"MIIFJjCCBMygAwIBAgIQAc4RmE1z36BQTG41XVo7STAKBggqhkjOPQQDAjBKMQswCQYDVQQGEwJV\\r\\nUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMXQ2xvdWRmbGFyZSBJbmMgRUND\\r\\nIENBLTMwHhcNMjIwNTI4MDAwMDAwWhcNMjMwNTI4MjM1OTU5WjB1MQswCQYDVQQGEwJVUzETMBEG\\r\\nA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQQ2xvdWRm\\r\\nbGFyZSwgSW5jLjEeMBwGA1UEAxMVc25pLmNsb3VkZmxhcmVzc2wuY29tMFkwEwYHKoZIzj0CAQYI\\r\\nKoZIzj0DAQcDQgAENvXhMbPHM1wuM8muwgLfqOY8OZhhVbzGKYNf+VVTkgU4xvYoOtoBckp/L8HE\\r\\nYEIex1s77eEKNW4GuId6r+9g1KOCA2cwggNjMB8GA1UdIwQYMBaAFKXON+rrsHUOlGeItEX62SQQ\\r\\nh5YfMB0GA1UdDgQWBBSK7ogvwe81QKZOZXOq3FJVyiO3UTAuBgNVHREEJzAlggx3d3cuaWV0Zi5v\\r\\ncmeCFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0lBBYwFAYIKwYB\\r\\nBQUHAwEGCCsGAQUFBwMCMHsGA1UdHwR0MHIwN6A1oDOGMWh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNv\\r\\nbS9DbG91ZGZsYXJlSW5jRUNDQ0EtMy5jcmwwN6A1oDOGMWh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNv\\r\\nbS9DbG91ZGZsYXJlSW5jRUNDQ0EtMy5jcmwwPgYDVR0gBDcwNTAzBgZngQwBAgIwKTAnBggrBgEF\\r\\nBQcCARYbaHR0cDovL3d3dy5kaWdpY2VydC5jb20vQ1BTMHYGCCsGAQUFBwEBBGowaDAkBggrBgEF\\r\\nBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\\r\\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB/wQCMAAwggF9\\r\\nBgorBgEEAdZ5AgQCBIIBbQSCAWkBZwB2AOg+0No+9QY1MudXKLyJa8kD08vREWvs62nhd31tBr1u\\r\\nAAABgQg6Ys4AAAQDAEcwRQIhANX0PSUOX/P50JSOcCYD98B6qt+R31549HF5pG7vNY6tAiBF0mN1\\r\\nuKpSSU//UYa2JsFnyNJoP1SCjjmltkviylJTlwB1ADXPGRu/sWxXvw+tTG1Cy7u2JyAmUeo/4Srv\\r\\nqAPDO9ZMAAABgQg6YugAAAQDAEYwRAIgFiWFDBq0iPpHVeuvExEotWs8OPvznzF5G/HKdTRoGSMC\\r\\nIFEHSwwxLw/3H7xZQCkga6oE2tlBnz1+RhcEMGSG+42iAHYAtz77JN+cTbp18jnFulj0bF38Qs96\\r\\nnzXEnh0JgSXttJkAAAGBCDpi0wAABAMARzBFAiEAyf8VZ5Y1NvgVk5PaBzvX3sWYqeLVaZje5QSs\\r\\nHIapKD8CICez+afq/kWu3bNv7ci5/ftUK63G4pye/8/tfzhPS3/HMAoGCCqGSM49BAMCA0gAMEUC\\r\\nIQDOQ2v6is3j1uVq8oS15c5SHTcsUd25ErdbcfGSs9HTGAIgIINaIvgtyM5xDmIObFHPBNYQpIAc\\r\\n9lIZN9fvL9ct7Yk=\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Certificates\n\nSet or update multiple trusted certificate altogether.\n\nInput: see sample\n\n``` json\n{  \"input\": {    \"name\" : \"New trusted cert\",    \"certBase64\" : \"thebase64cert\",    \"verifyHostname\" : true,    \"trustAnchor\" : true,    \"trustedFor\" : [\"SIGNING_SERVER_CERTS\"],    \"revocationCheckPolicyType\" : \"USE_DEFAULT\"  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Trusted Cert",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteTrustedCerts ($trustedCerts: [String!]!) {\n    deleteTrustedCerts (thumbprintSha1s: $trustedCerts) {\n        detailedStatus {status description}\n        trustedCerts {\n            goid\n            name\n            subjectDn\n            thumbprintSha1\n        }\n    }\n}",
												"variables": "{\n    \"trustedCerts\": [\n        \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n        \"KCjaydt1qoeF9KZJxM0pDgBAd1U=\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Trusted Certificate\n\nDelete the trusted certificate given its thumbprintsha1\n\nInput: thumbprintSha1"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Trusted Certs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCerts {\n    trustedCerts {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name }\n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Trusted Certs\n\nword"
									},
									"response": []
								},
								{
									"name": "Trusted Certs by DN",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCertsByDn ($subjectDn: String!) {\n    trustedCertsByDn (subjectDn: $subjectDn) {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name } \n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{\n  \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Certs by subject DN\n\nRetrieves a list of trusted certificates with the matching subject distinguished name.\n\nInput: subjectDn"
									},
									"response": []
								},
								{
									"name": "Trusted Cert by Thumbprint",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCertByThumbprint ($thumbprintSha1: String!) {\n    trustedCertByThumbprint (thumbprintSha1: $thumbprintSha1) {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name } \n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{\n  \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cert by thumbprint\n\nRetrieves the unique (if any) certificate given its thumbprint sha1.\n\nInput: thumbprintSha1"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Web API Services",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Web API Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setWebApiServices (\n    $webApiServices: [WebApiServiceInput!]!,\n    $clusterProperties: [ClusterPropertyInput!]!) {\n    # Ensure the availability of Web API service dependencies\n    setClusterProperties(input: $clusterProperties) {\n        detailedStatus {status description}\n        clusterProperties {\n            goid\n            name\n            checksum\n        }\n    }\n    setWebApiServices (input: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"webApiServices\": [\n    {\n      \"goid\": \"65477cae03c1f8c2eb1c74584497cd7a\",\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"checksum\": \"f91b1858402bbce0945f0c3fcb4cb2c3eeb1ba07\"\n    },\n    {\n      \"name\": \"some-other-webapi\",\n      \"resolutionPath\": \"/some-other-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    }\n  ],\n  \"clusterProperties\": [\n    {\n      \"name\": \"greetings\",\n      \"value\": \"Hello, World!\"\n    }\n  ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Update Web API Service - Move Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateWebApiService($webApiServices: [WebApiServiceInput!]!) {\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n\n            folderPath # modified field\n        }\n    }\n}",
												"variables": "{\n  \"webApiServices\": [\n    {\n      \"goid\": \"65477cae03c1f8c2eb1c74584497cd7a\",\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices/some-folder\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"checksum\": \"f91b1858402bbce0945f0c3fcb4cb2c3eeb1ba07\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Web Api Service\n\nIdentify a web api service to update given its resolutionPath, then the property(ies) you want to update about it.\n\nInput: in this example, the service at the given resolution path is being moved to a different folder path\n\n``` json\n{  \"resolutionPath\" : \"/testNewService17\",  \"input\": {    \"folderPath\" : \"/migrationTest\"  }}\n```"
									},
									"response": []
								},
								{
									"name": "Delete Web API Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteWebApiServices($webApiServices: [String!]!) {\n    deleteWebApiServices(resolutionPaths: $webApiServices) {\n        detailedStatus {status description}\n        webApiServices {\n            goid\n            name\n            resolutionPath\n        }\n    }\n}",
												"variables": "{\n    \"webApiServices\": [\n        \"/some-webapi\", \n        \"/some-other-webapi\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Web Api Service\n\nDeletes a Web Api Service given its resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Web API Services in Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServicesByFolderPath ($folderPath: String!) {\n    webApiServicesByFolderPath (folderPath: $folderPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/webApiServices\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# APIs in a folder\n\nRetrieves the Web APi Services given a folder path. This query good into subfolders as well so you get the whole tree.\n\nInput: folderPath"
									},
									"response": []
								},
								{
									"name": "Web API Service by Resolution Path",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServiceByResolutionPath ($resolutionPath: String!) {\n    webApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n        \n        policy {xml}\n    }\n}",
												"variables": "{\n    \"resolutionPath\": \"/some-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# API by resolution path\n\nGet a Web API Service given its unique resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								},
								{
									"name": "Web API Services by Name including Policy Dependencies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServicesByName ($name: String!) {\n    webApiServicesByName (name: $name) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n        \n        policy {\n            xml\n            allDependencies {\n                policyFragments {guid name folderPath checksum}\n                encassConfigs {guid name policyName checksum}\n                clusterProperties {name checksum}\n                jdbcConnections {name checksum}\n                # please do consider listing the remaining supported entity types as dependencies\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\": \"some-other-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Api and dependencies\n\nGet a Web Api Service given its name and also get the dependencies that are in the service's policy (nested dependencies too).\n\nInput: the name of the Web Api Service"
									},
									"response": []
								},
								{
									"name": "All Web API Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServices {\n    webApiServices {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					],
					"description": "# Web API Services\n\nHow to query and mutate published services of type Web API (REST apis)"
				}
			],
			"description": "# CRUD Config Entities\n\nThis folder contains queries (read) and mutations (create/update/delete) for full CRUD for each Layer7 Gateway configuration entity type supported.\n\nNOTE: Please do install the pre-req RESTMAN bundle (postman/graphman-prereq.bundle) for successful execution of CRUD operations (especially, SET mutation for Trusted Certs)."
		},
		{
			"name": "Summary and compare",
			"item": [
				{
					"name": "Compare gateways",
					"item": [
						{
							"name": "Source Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const summarySource=pm.response.json();",
											"pm.environment.set(\"summarySource\", JSON.stringify(summarySource));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query summary {\n    policyFragments {\n        name\n        guid\n        checksum\n    }\n    encassConfigs {\n        name\n        guid\n        checksum\n    }\n    webApiServices {\n        resolutionPath\n        checksum\n    }\n    clusterProperties {\n        name\n        checksum\n    }\n    trustedCerts {\n        name\n        subjectDn\n        checksum\n    }\n    jdbcConnections {\n        name\n        checksum\n    }\n    soapServices {\n        name\n        resolvers {\n            baseUri\n            soapActions\n            resolutionPath\n        }\n        checksum\n    }\n    schemas {\n        systemId\n        checksum\n    }\n    dtds {\n        systemId\n        checksum\n    }\n    fips {\n        name\n        checksum\n        goid\n    }\n    ldaps {\n        name\n        checksum\n        goid\n    }\n    internalGroups {\n        name\n        checksum\n        goid\n    }\n    fipGroups {\n        name\n        providerName\n        checksum\n        goid\n    }\n    internalUsers {\n        name\n        checksum\n        goid\n    }\n    fipUsers {\n        name\n        providerName\n        checksum\n        goid\n    }\n    keys {\n        alias\n        checksum\n    }\n    secrets {\n        name\n        checksum\n    }\n    cassandraConnections {\n        name\n        checksum\n    }\n    jmsDestinations {\n       name\n       checksum\n    }\n    globalPolicies {\n       name\n       tag\n       guid\n       checksum\n   }\n    backgroundTaskPolicies {\n       name\n       guid\n       checksum\n   }\n    scheduledTasks {\n       name\n       checksum\n   }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "Summary of source\n\nUse as-is except for the target. This produces a summary of all the configuration."
							},
							"response": []
						},
						{
							"name": "Target Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// set summary target",
											"var targetSummaryRoot=pm.response.json();",
											"pm.environment.set(\"summaryTarget\", JSON.stringify(targetSummaryRoot));",
											"// get source one",
											"var sourceSummaryRoot = JSON.parse(pm.environment.get(\"summarySource\"));",
											"if (sourceSummaryRoot.data) sourceSummaryRoot = sourceSummaryRoot.data;",
											"if (targetSummaryRoot.data) targetSummaryRoot = targetSummaryRoot.data;",
											"",
											"",
											"",
											"const report = {};",
											"const guidMappings = [];",
											"var goidMappings = [];",
											"",
											"// traverse the source and compare to target",
											"const keys = Object.keys(sourceSummaryRoot);",
											"const entries = Object.values(sourceSummaryRoot);",
											"for (var i = 0; i < keys.length; i++) {",
											"    if (Array.isArray(entries[i])) {",
											"        var arrayEntries = entries[i];",
											"        for (var j = 0; j < arrayEntries.length; j++) {",
											"            processSingleEntity(arrayEntries[j], keys[i]);",
											"        }",
											"    } else {",
											"        processSingleEntity(entries[i], keys[i]);",
											"    }",
											"}",
											"function processSingleEntity(entity, type) {",
											"    const targetSummarySection = targetSummaryRoot[type];",
											"    if (report[type] == null) report[type] = {};",
											"    var targetReportArea = report[type];",
											"    handleEntry(entity, targetSummarySection, targetReportArea);",
											"}",
											"function matchIt(sourceEntry, targetArea) {",
											"    // look for corresponding on target",
											"    var match = null;",
											"    if (targetArea) for (var j = 0; j < targetArea.length; j++) {",
											"        if (sourceEntry.resolvers) { // soap services match by resolver",
											"            // try to match base uri",
											"            var sameBaseUri = false;",
											"            if (targetArea[j].resolvers.baseUri === sourceEntry.resolvers.baseUri) {",
											"                sameBaseUri = true;",
											"            }",
											"            // try to match resolution path but only if base uri matches",
											"            var sameResolutionPath = false;",
											"            if (sameBaseUri) {",
											"                if (targetArea[j].resolvers.resolutionPath) {",
											"                    if (targetArea[j].resolvers.resolutionPath === sourceEntry.resolvers.resolutionPath) {",
											"                        sameResolutionPath = true;",
											"                    }",
											"                } else if (!sourceEntry.resolvers.resolutionPath) {",
											"                    sameResolutionPath = true;",
											"                }",
											"            }",
											"            // try to match soapaction if rest matches so far",
											"            var matchSoapAction = false;",
											"            if (sameBaseUri && sameResolutionPath) {",
											"                if (targetArea[j].resolvers.soapActions.length < 1 && sourceEntry.resolvers.soapActions.length < 1) {",
											"                    matchSoapAction = true;",
											"                } else for (var k = 0; k < targetArea[j].resolvers.soapActions.length; k++) {",
											"                    for (var l = 0; l < sourceEntry.resolvers.soapActions.length; l++) {",
											"                        if (targetArea[j].resolvers.soapActions[k] === sourceEntry.resolvers.soapActions[l]) {",
											"                            matchSoapAction = true;",
											"                            break;",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"            if (sameBaseUri && sameResolutionPath && matchSoapAction) {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        } else if (sourceEntry.systemId) { // dtd and schemas match by 'systemId' property, if present, match on that",
											"            if (targetArea[j].systemId === sourceEntry.systemId) {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        }  else if (sourceEntry.resolutionPath) { // rest apis match by resolution path",
											"            if (targetArea[j].resolutionPath === sourceEntry.resolutionPath) {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        } else if (sourceEntry.alias) {",
											"            if (targetArea[j].alias === sourceEntry.alias) {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        } else if (targetArea[j].name === sourceEntry.name) { // otherwise, match by name",
											"            if (sourceEntry.providerName) { // if the providername is set, also match that",
											"                if (targetArea[j].providerName === sourceEntry.providerName) {",
											"                    match = targetArea[j];",
											"                    break;",
											"                }",
											"            } else {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        }",
											"    }",
											"    return match;",
											"}",
											"function handleEntry(sourceEntry, targetArea, reportArea) {",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (!reportArea.new) reportArea.new = [];",
											"        reportArea.new.push(sourceEntry);",
											"    } else {",
											"        if (sourceEntry.checksum === match.checksum) {",
											"            // checksum match",
											"        } else {",
											"            if (!reportArea.updated) reportArea.updated = [];",
											"            reportArea.updated.push(sourceEntry);",
											"        }",
											"        // only worry about guid check if declared at source",
											"        if (sourceEntry.guid) {",
											"            if (sourceEntry.guid === match.guid) {",
											"                // goid match",
											"            } else {",
											"                // also record separately",
											"                var guidmap = {};",
											"                guidmap.source = sourceEntry.guid;",
											"                guidmap.target = match.guid;",
											"                guidMappings.push(guidmap);",
											"                reportArea.guidConflicts.push(sourceEntry);",
											"            }",
											"        }",
											"        // only worry about goid check if declared at source",
											"        if (sourceEntry.goid) {",
											"            if (sourceEntry.goid === match.goid) {",
											"                // goid match",
											"            } else {",
											"                // record the goid difference separately for mapping purposes",
											"                var goidmap = {};",
											"                goidmap.source = sourceEntry.goid;",
											"                goidmap.target = match.goid;",
											"                goidMappings.push(goidmap);",
											"                if (!reportArea.goidConflicts) reportArea.goidConflicts = [];",
											"                reportArea.goidConflicts.push(sourceEntry);",
											"            }",
											"        }",
											"    }",
											"}",
											"// END OF PROCESSING SUMMARY ENTRIES",
											"// clean report of empty sections",
											"const reportkeys = Object.keys(report);",
											"for (var i = 0; i < reportkeys.length; i++)  {",
											"    const prop = report[reportkeys[i]];",
											"    if (prop) {",
											"        var shouldDelete = true;",
											"        if (prop.new) {",
											"            if (prop.new.length > 0) shouldDelete = false;",
											"            else delete prop.new;",
											"        }",
											"        if (prop.updated) {",
											"            if (prop.updated.length > 0) shouldDelete = false;",
											"            else delete prop.updated;",
											"        }",
											"        if (prop.guidConflicts) {",
											"            if (prop.guidConflicts.length > 0) shouldDelete = false;",
											"            else delete prop.guidConflicts;",
											"        }",
											"        if (prop.goidConflicts) {",
											"            if (prop.goidConflicts.length > 0) shouldDelete = false;",
											"            else delete prop.goidConflicts;",
											"        }",
											"        if (shouldDelete) delete report[reportkeys[i]];",
											"    }",
											"}",
											"",
											"// append mappings if any",
											"if (goidMappings.length > 0) {",
											"    report.goidMappings = goidMappings;",
											"}",
											"if (guidMappings.length > 0) {",
											"    report.guidMappings = guidMappings;",
											"}",
											"",
											"",
											"",
											"// Display and save report results",
											"const finalReport = JSON.stringify(report, null, 2);",
											"pm.environment.set(\"compareReport\", finalReport);",
											"console.log(finalReport);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query summary {\n    policyFragments {\n        name\n        guid\n        checksum\n    }\n    encassConfigs {\n        name\n        guid\n        checksum\n    }\n    webApiServices {\n        resolutionPath\n        checksum\n    }\n    clusterProperties {\n        name\n        checksum\n    }\n    trustedCerts {\n        name\n        subjectDn\n        checksum\n    }\n    jdbcConnections {\n        name\n        checksum\n    }\n    soapServices {\n        name\n        resolvers {\n            baseUri\n            soapActions\n            resolutionPath\n        }\n        checksum\n    }\n    schemas {\n        systemId\n        checksum\n    }\n    dtds {\n        systemId\n        checksum\n    }\n    fips {\n        name\n        checksum\n        goid\n    }\n    ldaps {\n        name\n        checksum\n        goid\n    }\n    internalGroups {\n        name\n        checksum\n        goid\n    }\n    fipGroups {\n        name\n        providerName\n        checksum\n        goid\n    }\n    internalUsers {\n        name\n        checksum\n        goid\n    }\n    fipUsers {\n        name\n        providerName\n        checksum\n        goid\n    }\n    keys {\n        alias\n        checksum\n    }\n    secrets {\n        name\n        checksum\n    }\n    cassandraConnections {\n        name\n        checksum\n    }\n    jmsDestinations {\n       name\n       checksum\n    }\n    globalPolicies {\n       name\n       tag\n       guid\n       checksum\n   }\n    backgroundTaskPolicies {\n       name\n       guid\n       checksum\n   }\n    scheduledTasks {\n       name\n       checksum\n   }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "Summary of target\n\nUse as-is except for the target. This produces a summary of all the configuration."
							},
							"response": []
						}
					],
					"description": "Sequence of graphman calls to produce a report which highlights the differences between a source and target gateways.\n\nThe report is shown in the console as well as saved in the environment."
				},
				{
					"name": "Dependency Analyzer",
					"item": [
						{
							"name": "Dependency Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var depSummaryRoot = pm.response.json();",
											"if (depSummaryRoot.data) depSummaryRoot = depSummaryRoot.data;",
											"",
											"function matchIt(left, right) {",
											"    if (left.resolvers) { // soap services match by resolver",
											"        // try to match base uri",
											"        var sameBaseUri = false;",
											"        if (right.resolvers.baseUri === left.resolvers.baseUri) {",
											"            sameBaseUri = true;",
											"        }",
											"        // try to match resolution path but only if base uri matches",
											"        var sameResolutionPath = false;",
											"        if (sameBaseUri) {",
											"            if (right.resolvers.resolutionPath) {",
											"                if (right.resolvers.resolutionPath === left.resolvers.resolutionPath) {",
											"                    sameResolutionPath = true;",
											"                }",
											"            } else if (!left.resolvers.resolutionPath) {",
											"                sameResolutionPath = true;",
											"            }",
											"        }",
											"        // try to match soapaction if rest matches so far",
											"        var matchSoapAction = false;",
											"        if (sameBaseUri && sameResolutionPath) {",
											"            for (var k = 0; k < right.resolvers.soapActions.length; k++) {",
											"                for (var l = 0; l < left.resolvers.soapActions.length; l++) {",
											"                    if (right.resolvers.soapActions[k] === left.resolvers.soapActions[l]) {",
											"                        matchSoapAction = true;",
											"                        break;",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        if (sameBaseUri && sameResolutionPath && matchSoapAction) {",
											"            return true;",
											"        }",
											"    } else if (left.systemId) { // dtd and schemas match by 'systemId' property, if present, match on that",
											"        if (right.systemId === left.systemId) {",
											"            return true;",
											"        }",
											"    }  else if (left.resolutionPath) { // rest apis match by resolution path",
											"        if (right.resolutionPath === left.resolutionPath) {",
											"            return true;",
											"        }",
											"    } else if (left.alias) {",
											"        if (right.alias === left.alias) {",
											"            return true;",
											"        }",
											"    } else if (left.name && right.name === left.name) { // otherwise, match by name",
											"        if (left.providerName) { // if the providername is set, also match that",
											"            if (right.providerName === left.providerName) {",
											"                return true;",
											"            }",
											"        } else {",
											"            return true;",
											"        }",
											"    }",
											"    return false;",
											"}",
											"",
											"function handleEntry(parentName, entity, root) {",
											"    const keys = Object.keys(root);",
											"    for (var i = 0; i < keys.length; i++) {",
											"        const proparray = root[keys[i]];",
											"        if (proparray != null && Array.isArray(proparray) && proparray.length > 0) {",
											"            for (var j = 0; j < proparray.length; j++) {",
											"                const prop = proparray[j];",
											"                if (prop.policy && prop.policy.allDependencies) {",
											"                    const subkeys = Object.keys(prop.policy.allDependencies);",
											"                    const subproparrayOfInterest = prop.policy.allDependencies[parentName];",
											"                    if (subproparrayOfInterest != null && Array.isArray(subproparrayOfInterest) && subproparrayOfInterest.length > 0) {",
											"                        for (var k = 0; k < subproparrayOfInterest.length; k++) {",
											"                            if (matchIt(entity, subproparrayOfInterest[k])) {",
											"                                if (entity.reverseDependencies == null) entity.reverseDependencies = {};",
											"                                if (entity.reverseDependencies[keys[i]] == null) entity.reverseDependencies[keys[i]] = [];",
											"                                entity.reverseDependencies[keys[i]].push(prop);",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"const keys = Object.keys(depSummaryRoot);",
											"for (var i = 0; i < keys.length; i++) {",
											"    const proparray = depSummaryRoot[keys[i]];",
											"    if (proparray != null && Array.isArray(proparray) && proparray.length > 0) {",
											"        for (var j = 0; j < proparray.length; j++) {",
											"            const prop = proparray[j];",
											"            handleEntry(keys[i], prop, depSummaryRoot);",
											"        }",
											"    }",
											"}",
											"// traverse, remove what we dont want to keep",
											"for (var i = 0; i < keys.length; i++) {",
											"    const proparray = depSummaryRoot[keys[i]];",
											"    if (proparray != null && Array.isArray(proparray) && proparray.length > 0) {",
											"        for (var j = 0; j < proparray.length; j++) {",
											"            const prop = proparray[j];",
											"            // delete forward dependencies that are there",
											"            if (prop.policy) delete prop.policy;",
											"            // only keep what has reverse dependencies",
											"            if (prop.reverseDependencies) {",
											"                var shouldDelete = true;",
											"                const subkeys = Object.keys(prop.reverseDependencies);",
											"                for (var k = 0; k < subkeys.length; k++) {",
											"                    const subproparray = prop.reverseDependencies[subkeys[k]];",
											"                    if (subproparray.length < 1) delete prop.reverseDependencies[subkeys[k]];",
											"                    else {",
											"                        shouldDelete = false;",
											"                    }",
											"                }",
											"                if (shouldDelete) {",
											"                    delete prop.reverseDependencies;",
											"                    delete proparray[j];",
											"                }",
											"            } else {",
											"                delete proparray[j];",
											"            }",
											"        }",
											"        // delete null entries from array",
											"        var filtered = proparray.filter(function (el) {",
											"            return el != null;",
											"        });",
											"        depSummaryRoot[keys[i]] = filtered;",
											"    }",
											"    if (depSummaryRoot[keys[i]].length < 1) {",
											"        delete depSummaryRoot[keys[i]];",
											"    }",
											"}",
											"",
											"// report result",
											"console.log(JSON.stringify(depSummaryRoot, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query dependencySummary {\n    policyFragments {\n        name\n        guid\n        checksum\n        policy {\n            allDependencies {\n                policyFragments {\n                    name\n                    guid\n                    checksum\n                }\n                encassConfigs {\n                    name\n                    guid\n                    checksum\n                }\n                clusterProperties {\n                    name\n                    checksum\n                }\n                trustedCerts {\n                    name\n                    subjectDn\n                    checksum\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                }\n                schemas {\n                    systemId\n                    checksum\n                }\n                dtds {\n                    systemId\n                    checksum\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                }\n                ldaps {\n                    name\n                    checksum\n                    goid\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                internalUsers {\n                    name\n                    checksum\n                    goid\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                }\n                secrets {\n                    name\n                    checksum\n                    goid\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    name\n                    checksum\n                }\n            }\n        }\n    }\n    encassConfigs {\n        name\n        guid\n        checksum\n    }\n    webApiServices {\n        resolutionPath\n        checksum\n        policy {\n            allDependencies {\n                policyFragments {\n                    name\n                    guid\n                    checksum\n                }\n                encassConfigs {\n                    name\n                    guid\n                    checksum\n                }\n                clusterProperties {\n                    name\n                    checksum\n                }\n                trustedCerts {\n                    name\n                    subjectDn\n                    checksum\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                }\n                schemas {\n                    systemId\n                    checksum\n                }\n                dtds {\n                    systemId\n                    checksum\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                }\n                ldaps {\n                    name\n                    checksum\n                    goid\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                internalUsers {\n                    name\n                    checksum\n                    goid\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                }\n                secrets {\n                    name\n                    checksum\n                    goid\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    name\n                    checksum\n                }\n            }\n        }\n    }\n    clusterProperties {\n        name\n        checksum\n    }\n    trustedCerts {\n        name\n        subjectDn\n        checksum\n    }\n    jdbcConnections {\n        name\n        checksum\n    }\n    soapServices {\n        name\n        resolvers {\n            baseUri\n            soapActions\n            resolutionPath\n        }\n        checksum\n        policy {\n            allDependencies {\n                policyFragments {\n                    name\n                    guid\n                    checksum\n                }\n                encassConfigs {\n                    name\n                    guid\n                    checksum\n                }\n                clusterProperties {\n                    name\n                    checksum\n                }\n                trustedCerts {\n                    name\n                    subjectDn\n                    checksum\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                }\n                schemas {\n                    systemId\n                    checksum\n                }\n                dtds {\n                    systemId\n                    checksum\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                }\n                ldaps {\n                    name\n                    checksum\n                    goid\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                internalUsers {\n                    name\n                    checksum\n                    goid\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                }\n                secrets {\n                    name\n                    checksum\n                    goid\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    name\n                    checksum\n                }\n            }\n        }\n    }\n    schemas {\n        systemId\n        checksum\n    }\n    dtds {\n        systemId\n        checksum\n    }\n    fips {\n        name\n        checksum\n        goid\n    }\n    ldaps {\n        name\n        checksum\n        goid\n    }\n    internalGroups {\n        name\n        checksum\n        goid\n    }\n    fipGroups {\n        name\n        providerName\n        checksum\n        goid\n    }\n    internalUsers {\n        name\n        checksum\n        goid\n    }\n    fipUsers {\n        name\n        providerName\n        checksum\n        goid\n    }\n    keys {\n        alias\n        checksum\n        goid\n    }\n    secrets {\n        name\n        checksum\n        goid\n    }\n    cassandraConnections {\n        goid\n        name\n        checksum\n    }\n    jmsDestinations {\n       goid\n       name\n       checksum\n    }\n    globalPolicies {\n       name\n       tag\n       guid\n       checksum\n       policy {\n            allDependencies {\n                policyFragments {\n                    name\n                    guid\n                    checksum\n                }\n                encassConfigs {\n                    name\n                    guid\n                    checksum\n                }\n                clusterProperties {\n                    name\n                    checksum\n                }\n                trustedCerts {\n                    name\n                    subjectDn\n                    checksum\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                }\n                schemas {\n                    systemId\n                    checksum\n                }\n                dtds {\n                    systemId\n                    checksum\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                }\n                ldaps {\n                    name\n                    checksum\n                    goid\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                internalUsers {\n                    name\n                    checksum\n                    goid\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                }\n                secrets {\n                    name\n                    checksum\n                    goid\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    name\n                    checksum\n                }\n            }\n        }\n    }\n    backgroundTaskPolicies {\n       name\n       guid\n       checksum\n       policy {\n            allDependencies {\n                policyFragments {\n                    name\n                    guid\n                    checksum\n                }\n                encassConfigs {\n                    name\n                    guid\n                    checksum\n                }\n                clusterProperties {\n                    name\n                    checksum\n                }\n                trustedCerts {\n                    name\n                    subjectDn\n                    checksum\n                }\n                jdbcConnections {\n                    name\n                    checksum\n                }\n                schemas {\n                    systemId\n                    checksum\n                }\n                dtds {\n                    systemId\n                    checksum\n                }\n                fips {\n                    name\n                    checksum\n                    goid\n                }\n                ldaps {\n                    name\n                    checksum\n                    goid\n                }\n                internalGroups {\n                    name\n                    checksum\n                    goid\n                }\n                fipGroups {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                internalUsers {\n                    name\n                    checksum\n                    goid\n                }\n                fipUsers {\n                    name\n                    providerName\n                    checksum\n                    goid\n                }\n                keys {\n                    alias\n                    checksum\n                    goid\n                }\n                secrets {\n                    name\n                    checksum\n                    goid\n                }\n                cassandraConnections {\n                    goid\n                    name\n                    checksum\n                }\n                jmsDestinations {\n                    goid\n                    name\n                    checksum\n                }\n            }\n        }\n   }\n    scheduledTasks {\n       name\n       checksum\n   }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Summary of Dependencies"
							},
							"response": []
						}
					]
				},
				{
					"name": "Compare Identity Providers, Users, Groups",
					"item": [
						{
							"name": "Idp Summary Source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const summarySource=pm.response.json();",
											"pm.environment.set(\"idpSummarySource\", JSON.stringify(summarySource));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query idp_summary {\n    fips {\n        name\n        goid\n    }\n    ldaps {\n        name\n        goid\n    }\n    internalGroups {\n        name\n        goid\n    }\n    fipGroups {\n        name\n        goid\n    }\n    internalUsers {\n        name\n        goid\n    }\n    fipUsers {\n        name\n        goid\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "Summary of the identity provider-related entities in the gateway. See folder doc."
							},
							"response": []
						},
						{
							"name": "Idp Summary Target",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var targetSummaryRoot=pm.response.json();",
											"// generate report including entities with missingFromTarget and goidMappings",
											"const outpackage = {};",
											"outpackage.missingFromTarget = {};",
											"outpackage.goidMappings = [];",
											"",
											"function checkGoids(sourceGoid, targetGoid) {",
											"    if (sourceGoid === targetGoid) {",
											"            // it matches, do nothing",
											"        } else {",
											"            var goidmap = {};",
											"            goidmap.source = sourceGoid;",
											"            goidmap.target = targetGoid;",
											"            outpackage.goidMappings.push(goidmap)",
											"        }",
											"}",
											"function matchIt(sourceEntry, targetArea) {",
											"    // look for corresponding on target",
											"    var match = null;",
											"    if (targetArea) for (var j = 0; j < targetArea.length; j++) {",
											"        if (targetArea[j].name === sourceEntry.name) {",
											"            // if the providername is set, also match that",
											"            if (sourceEntry.providerName) {",
											"                if (targetArea[j].providerName === sourceEntry.providerName) {",
											"                    match = targetArea[j];",
											"                    break;",
											"                }",
											"            } else {",
											"                match = targetArea[j];",
											"                break;",
											"            }",
											"        }",
											"    }",
											"    return match;",
											"}",
											"",
											"var sourceSummaryRoot = JSON.parse(pm.environment.get(\"idpSummarySource\"));",
											"if (sourceSummaryRoot.data) sourceSummaryRoot = sourceSummaryRoot.data;",
											"if (targetSummaryRoot.data) targetSummaryRoot = targetSummaryRoot.data;",
											"// Fips",
											"if (sourceSummaryRoot.fips) for (var i = 0; i < sourceSummaryRoot.fips.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.fips[i];",
											"    const targetArea = targetSummaryRoot.fips;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.fips == null) {",
											"            outpackage.missingFromTarget.fips = [];",
											"        }",
											"        outpackage.missingFromTarget.fips.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"// ldaps",
											"if (sourceSummaryRoot.ldaps) for (var i = 0; i < sourceSummaryRoot.ldaps.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.ldaps[i];",
											"    const targetArea = targetSummaryRoot.ldaps;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.ldaps == null) {",
											"            outpackage.missingFromTarget.ldaps = [];",
											"        }",
											"        outpackage.missingFromTarget.ldaps.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"// internalGroups",
											"// toto overwrite match to consider the idprovider name",
											"if (sourceSummaryRoot.internalGroups) for (var i = 0; i < sourceSummaryRoot.internalGroups.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.internalGroups[i];",
											"    const targetArea = targetSummaryRoot.internalGroups;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.internalGroups == null) {",
											"            outpackage.missingFromTarget.internalGroups = [];",
											"        }",
											"        outpackage.missingFromTarget.internalGroups.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"// fipGroups",
											"if (sourceSummaryRoot.fipGroups) for (var i = 0; i < sourceSummaryRoot.fipGroups.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.fipGroups[i];",
											"    const targetArea = targetSummaryRoot.fipGroups;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.fipGroups == null) {",
											"            outpackage.missingFromTarget.fipGroups = [];",
											"        }",
											"        outpackage.missingFromTarget.fipGroups.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"// internalUsers",
											"if (sourceSummaryRoot.internalUsers) for (var i = 0; i < sourceSummaryRoot.internalUsers.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.internalUsers[i];",
											"    const targetArea = targetSummaryRoot.internalUsers;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.internalUsers == null) {",
											"            outpackage.missingFromTarget.internalUsers = [];",
											"        }",
											"        outpackage.missingFromTarget.internalUsers.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"// fipUsers",
											"// toto overwrite match to consider the idprovider name",
											"if (sourceSummaryRoot.fipUsers) for (var i = 0; i < sourceSummaryRoot.fipUsers.length; i++) {",
											"    const sourceEntry = sourceSummaryRoot.fipUsers[i];",
											"    const targetArea = targetSummaryRoot.fipUsers;",
											"    // look for corresponding on target",
											"    var match = matchIt(sourceEntry, targetArea);",
											"    // if no match, remember in missingFromTargets, otherwise check goid match",
											"    if (match == null) {",
											"        if (outpackage.missingFromTarget.fipUsers == null) {",
											"            outpackage.missingFromTarget.fipUsers = [];",
											"        }",
											"        outpackage.missingFromTarget.fipUsers.push(sourceEntry);",
											"    } else checkGoids(sourceEntry.goid, match.goid);",
											"}",
											"",
											"",
											"const finalReport = JSON.stringify(outpackage, null, 2);",
											"console.log(finalReport);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query idp_summary {\n    fips {\n        name\n        goid\n    }\n    ldaps {\n        name\n        goid\n    }\n    internalGroups {\n        name\n        goid\n    }\n    fipGroups {\n        name\n        goid\n    }\n    internalUsers {\n        name\n        goid\n    }\n    fipUsers {\n        name\n        goid\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{target_gw}}",
									"host": [
										"{{target_gw}}"
									]
								},
								"description": "Summary of the identity provider-related entities in the gateway. See folder doc."
							},
							"response": []
						}
					],
					"description": "This generates a identity provider summary for a source and target gateway and produces a report summarizing which entities on source are not present on target as well as creates a list of goid mappings. The entity types covered by this are:\n\n\\*   Fip\n\\*   LdapConfig\n\\*   FipGroup\n\\*   FipUser\n\\*   InternalGroup\n\\*   InternalUser"
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "7layer",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const passphrase = pm.collectionVariables.get(\"passphrase\");",
					"pm.request.headers.add({key: \"passphrase\", value: passphrase });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "local_gw",
			"value": "https://localhost:8443/graphman",
			"type": "string"
		},
		{
			"key": "source_gw",
			"value": "https://source.gateway:8443/graphman",
			"type": "string"
		},
		{
			"key": "target_gw",
			"value": "https://target.gateway:8443/graphman",
			"type": "string"
		},
		{
			"key": "restman_host",
			"value": "localhost:8443",
			"type": "string"
		},
		{
			"key": "passphrase",
			"value": "7layer",
			"type": "string"
		},
		{
			"key": "meta",
			"value": "{\n  \"activeConnectors\": {\n    \"prefix\": \"activeConnector\"\n  },\n  \"backgroundTaskPolicies\": {\n    \"prefix\": \"backgroundTaskPolic\"\n  },\n  \"cassandraConnections\": {\n    \"prefix\": \"cassandraConnection\"\n  },\n  \"trustedCerts\": {\n    \"prefix\": \"trustedCert\"\n  },\n  \"clusterProperties\": {\n    \"prefix\": \"clusterPropert\"\n  },\n  \"dtds\": {\n    \"prefix\": \"dtd\"\n  },\n  \"emailListeners\": {\n    \"prefix\": \"emailListener\"\n  },\n  \"encassConfigs\": {\n    \"prefix\": \"encassConfig\"\n  },\n  \"fips\": {\n    \"prefix\": \"fip\"\n  },\n  \"fipGroups\": {\n    \"prefix\": \"fipGroup\"\n  },\n  \"fipUsers\": {\n    \"prefix\": \"fipUser\"\n  },\n  \"globalPolicies\": {\n    \"prefix\": \"globalPolic\"\n  },\n  \"internalGroups\": {\n    \"prefix\": \"internalGroup\"\n  },\n  \"internalSoapServices\": {\n    \"prefix\": \"internalSoapService\"\n  },\n  \"internalUsers\": {\n    \"prefix\": \"internalUser\"\n  },\n  \"internalWebApiServices\": {\n    \"prefix\": \"internalWebApiService\"\n  },\n  \"jdbcConnections\": {\n    \"prefix\": \"jdbcConnection\"\n  },\n  \"jmsDestinations\": {\n    \"prefix\": \"jmsDestination\"\n  },\n  \"keys\": {\n    \"prefix\": \"key\"\n  },\n  \"ldaps\": {\n    \"prefix\": \"ldap\"\n  },\n  \"listenPorts\": {\n    \"prefix\": \"listenPort\"\n  },\n  \"policyFragments\": {\n    \"prefix\": \"policyFragment\"\n  },\n  \"revocationCheckPolicies\": {\n    \"prefix\": \"revocationCheckPolic\"\n  },\n  \"smConfigs\": {\n    \"prefix\": \"smConfig\"\n  },\n  \"scheduledTasks\": {\n    \"prefix\": \"scheduledTask\"\n  },\n  \"schemas\": {\n    \"prefix\": \"schema\"\n  },\n  \"secrets\": {\n    \"prefix\": \"secret\"\n  },\n  \"serverModuleFiles\": {\n    \"prefix\": \"serverModuleFile\"\n  },\n  \"soapServices\": {\n    \"prefix\": \"soapService\"\n  },\n  \"webApiServices\": {\n    \"prefix\": \"webApiService\"\n  }\n}",
			"type": "string"
		}
	]
}